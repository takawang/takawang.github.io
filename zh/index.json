[{"content":"SCSS 是一種用於簡化和增強 CSS 的語言，它具有變數、巢狀規則、混入、函數等功能，使得 CSS 更易於維護和擴展。\n1. 安裝 Sass 首先，確保你的開發環境中已經安裝了 Sass。你可以使用 npm（Node.js 包管理器）來安裝 Sass：\nnpm install -g sass 2. 創建 SCSS 文件 在你的專案中，創建一個新的 .scss 文件，例如 styles.scss。\n3. 基本語法 變數 (Variable) 🔥 $primary-color: #3498db; $font-size: 16px; body { color: $primary-color; font-size: $font-size; } 巢狀規則 (Nested) 🔥 nav { background: $primary-color; ul { list-style: none; padding: 0; li { display: inline-block; margin-right: 10px; } } } 對應的 CSS\nnav { background: $primary-color; } nav ul { list-style: none; padding: 0; } nav ul li { display: inline-block; margin-right: 10px; } 父選擇器或巢狀選擇器 (Parent Selector) 🔥 在 SCSS 中，\u0026amp; 符號被稱為“父選擇器”（Parent Selector）或“嵌套選擇器”（Nested Selector）。它在 SCSS 中的主要作用是引用父選擇器的上下文，使得在嵌套的情況下能夠更靈活地構建和生成 CSS。\n以下是一些常見用法：\n嵌套選擇器：\nnav { background: #333; a { color: #fff; \u0026amp;:hover { text-decoration: underline; } } } 對應的 CSS： nav { background: #333; } nav a { color: #fff; } nav a:hover { text-decoration: underline; } 在這裡，\u0026amp; 用於引用其上下文中的父選擇器 nav。\n擴展選擇器：\n.button { background: blue; \u0026amp;.active { background: red; } } 對應的 CSS： .button { background: blue; } .button.active { background: red; } 在這裡，\u0026amp; 被用於嵌套地構建 .button.active。\n混入 (Mixin) 🔥 @mixin border-radius($radius) { -webkit-border-radius: $radius; -moz-border-radius: $radius; border-radius: $radius; } .box { @include border-radius(10px); } 導入 (Import) 💡 // _variables.scss $primary-color: #3498db; // styles.scss @import \u0026#34;variables\u0026#34;; body { color: $primary-color; } 擴展 (Extend) 💡 擴展是一種 SCSS 功能，允許你使用一個選擇器的樣式來擴展另一個選擇器的樣式，類似於 CSS 中的類。這可以減少代碼的重複並提高可維護性。\nSCSS 範例\n%button-style { display: inline-block; padding: 10px 20px; font-size: 16px; } .btn-primary { @extend %button-style; background-color: #3498db; color: #fff; } .btn-secondary { @extend %button-style; background-color: #e74c3c; color: #fff; } 在這個例子中，%button-style 是一個 placeholder，它包含了通用的按鈕樣式。然後，btn-primary 和 btn-secondary 透過 @extend 將這些通用樣式擴展到具體的按鈕類別中。\n對應的 CSS\n.btn-primary, .btn-secondary { display: inline-block; padding: 10px 20px; font-size: 16px; } .btn-primary { background-color: #3498db; color: #fff; } .btn-secondary { background-color: #e74c3c; color: #fff; } 函數 (Function) SCSS 允許你定義和使用函數，這樣你就可以更靈活地處理數據和生成樣式。\nSCSS 範例\n@function calculate-width($width, $padding) { @return $width + 2 * $padding; } .container { width: calculate-width(200px, 10px); padding: 10px; } 在這個例子中，calculate-width 函數接受兩個參數：$width 和 $padding，然後返回計算後的寬度。這個函數被用於設置 .container 元素的寬度。\n4. 編譯 SCSS 到 CSS 在終端機中執行以下命令，將你的 SCSS 文件編譯成 CSS：\nsass input.scss output.css 或者，如果你想要在每次保存文件時自動編譯，可以使用以下命令：\nsass --watch input.scss:output.css Sass 與 SCSS 語法差異 Sass（Syntactically Awesome Stylesheets）和 SCSS（Sassy CSS）都是 CSS 預處理器，它們提供了一些額外的功能和語法來更有效地編寫和管理樣式表。以下是 Sass 和 SCSS 的主要差異：\n語法差異： Sass： 使用縮進來表示區塊和層次結構，並且不使用分號和大括號。例如：\nbody font: 14px/1.4 \u0026#34;Helvetica Neue\u0026#34;, sans-serif color: #333 .container width: 100% margin: 0 auto SCSS： 使用大括號表示區塊和分號來結束每個聲明，更接近傳統的 CSS 語法。例如：\nbody { font: 14px/1.4 \u0026#34;Helvetica Neue\u0026#34;, sans-serif; color: #333; } .container { width: 100%; margin: 0 auto; } 文件擴展名： Sass： Sass 文件使用 .sass 作為擴展名。 SCSS： SCSS 文件使用 .scss 作為擴展名。 ","permalink":"https://blog2.cmwang.net/zh/posts/2023/12/scss-crash-course/","summary":"SCSS Crash Course","title":"SCSS Crash Course"},{"content":" PDO (PHP Data Objects) is a database access layer providing a uniform method of access to multiple databases. It is a secure and efficient way to interact with databases in PHP.\n1. Connecting to a Database \u0026lt;?php $host = \u0026#39;localhost\u0026#39;; $dbname = \u0026#39;your_database_name\u0026#39;; $username = \u0026#39;your_username\u0026#39;; $password = \u0026#39;your_password\u0026#39;; try { $pdo = new PDO(\u0026#34;mysql:host=$host;dbname=$dbname\u0026#34;, $username, $password); $pdo-\u0026gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); echo \u0026#34;Connected successfully\u0026#34;; } catch (PDOException $e) { echo \u0026#34;Connection failed: \u0026#34; . $e-\u0026gt;getMessage(); } ?\u0026gt; The line $pdo-\u0026gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); sets the error handling mode for PDO. Specifically, it sets PDO to throw exceptions when errors occur.\nPDO::ATTR_ERRMODE: This is an attribute that controls the error reporting mode. PDO::ERRMODE_EXCEPTION: This mode causes PDO to throw exceptions when errors occur, making it easier to handle errors in your code. So, if there\u0026rsquo;s an error in a PDO operation, it will throw an exception, and you can catch that exception to handle errors more gracefully.\n2. Executing Queries SELECT Statement\n$stmt = $pdo-\u0026gt;prepare(\u0026#39;SELECT * FROM your_table_name\u0026#39;); $stmt-\u0026gt;execute(); $result = $stmt-\u0026gt;fetchAll(PDO::FETCH_ASSOC); foreach ($result as $row) { // Process each row as needed echo $row[\u0026#39;column1\u0026#39;] . \u0026#34;\\t\u0026#34; . $row[\u0026#39;column2\u0026#39;] . \u0026#34;\\n\u0026#34;; } fetchAll: This method is used to fetch all rows from the result set returned by a prepared statement. It retrieves all the rows into an array. PDO::FETCH_ASSOC: This is a fetch style constant provided by PDO that specifies the format in which the rows should be fetched. In this case, FETCH_ASSOC indicates that the rows should be fetched as an associative array where the column names are used as keys. INSERT Statement:\n$data = [\u0026#39;value1\u0026#39;, \u0026#39;value2\u0026#39;]; $stmt = $pdo-\u0026gt;prepare(\u0026#39;INSERT INTO your_table_name (column1, column2) VALUES (?, ?)\u0026#39;); $stmt-\u0026gt;execute($data); echo \u0026#34;Data inserted successfully\u0026#34;; UPDATE Statement:\n$newValue = \u0026#39;new_value\u0026#39;; $id = 1; $stmt = $pdo-\u0026gt;prepare(\u0026#39;UPDATE your_table_name SET column1 = ? WHERE id = ?\u0026#39;); $stmt-\u0026gt;execute([$newValue, $id]); echo \u0026#34;Data updated successfully\u0026#34;; DELETE Statement:\n$id = 1; $stmt = $pdo-\u0026gt;prepare(\u0026#39;DELETE FROM your_table_name WHERE id = ?\u0026#39;); $stmt-\u0026gt;execute([$id]); echo \u0026#34;Data deleted successfully\u0026#34;; 3. Prepared Statements and Parameter Binding: Prepared statements help prevent SQL injection by separating SQL code from user input.\n$username = \u0026#39;user\u0026#39;; $password = \u0026#39;pass\u0026#39;; $stmt = $pdo-\u0026gt;prepare(\u0026#39;SELECT * FROM users WHERE username = :username AND password = :password\u0026#39;); $stmt-\u0026gt;bindParam(\u0026#39;:username\u0026#39;, $username); $stmt-\u0026gt;bindParam(\u0026#39;:password\u0026#39;, $password); $stmt-\u0026gt;execute(); $result = $stmt-\u0026gt;fetch(PDO::FETCH_ASSOC); In this example, placeholders (:username and :password) are used in the query, and then values are bound to these placeholders using bindParam. This helps prevent SQL injection and allows for better reuse of the prepared statement.\n4. Error Handling Always handle errors to ensure a robust application.\n","permalink":"https://blog2.cmwang.net/zh/posts/2023/12/pdo-crash-course/","summary":"PDO Cheat Sheet","title":"PDO Crash Course"},{"content":"\u003c!DOCTYPE html\u003e ","permalink":"https://blog2.cmwang.net/zh/posts/2023/12/where-is-the-35+-programmer/","summary":"Where is the programmer","title":"35歲的程式設計師都去哪了"},{"content":"Comparison Mixins (Options API) Composable (Composition API) ","permalink":"https://blog2.cmwang.net/zh/posts/2023/11/why-composition/","summary":"Why do we need composition API","title":"Why do we need composition API"},{"content":"Initialize Pinia for your app /src/main.js import \u0026#34;./assets/main.css\u0026#34;; import { createApp } from \u0026#34;vue\u0026#34;; import { createPinia } from \u0026#34;pinia\u0026#34;; // here 👈 import App from \u0026#34;./App.vue\u0026#34;; const app = createApp(App); app.use(createPinia()); // here 👈 app.mount(\u0026#34;#app\u0026#34;); Use the store template \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;counter-container\u0026#34;\u0026gt; \u0026lt;!-- state (data) --\u0026gt; \u0026lt;h2\u0026gt;{{ storeCounter.count }}\u0026lt;/h2\u0026gt; \u0026lt;!-- actions (methods)--\u0026gt; \u0026lt;button @click=\u0026#34;storeCounter.increaseCount\u0026#34;\u0026gt;+\u0026lt;/button\u0026gt; \u0026lt;button @click=\u0026#34;storeCounter.decreaseCount\u0026#34;\u0026gt;-\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- getters (computed) --\u0026gt; \u0026lt;div\u0026gt;The counter is {{ storeCounter.oddOrEven }}\u0026lt;/div\u0026gt; \u0026lt;!-- two-way data binding--\u0026gt; \u0026lt;input v-model=\u0026#34;storeCounter.count\u0026#34; type=\u0026#34;number\u0026#34; /\u0026gt; \u0026lt;/template\u0026gt; script \u0026lt;script setup\u0026gt; import {useCounterStore} from \u0026#39;@/stores/counter\u0026#39;; const storeCounter = useCounterStore(); \u0026lt;/script\u0026gt; Define the store (Composition API) composition api store import { ref, computed } from \u0026#34;vue\u0026#34;; import { defineStore } from \u0026#34;pinia\u0026#34;; export const useCounterStore = defineStore(\u0026#34;counter\u0026#34;, () =\u0026gt; { // State const count = ref(0); // Getters const doubleCount = computed(() =\u0026gt; count.value * 2); const oddOrEven = computed(() =\u0026gt; (count.value % 2 === 0 ? \u0026#34;even\u0026#34; : \u0026#34;odd\u0026#34;)); // Actions function increaseCount() { count.value++; } function decreaseCount() { count.value--; } // Expose the state, getters, and actions return { count, doubleCount, oddOrEven, increaseCount, decreaseCount, }; }); Define the store (Options API) options api store import { defineStore } from \u0026#34;pinia\u0026#34;; export const useCounterStore = defineStore(\u0026#34;counter\u0026#34;, { // State state: () =\u0026gt; ({ count: 0, }), // Getters getters: { oddOrEven: (state) =\u0026gt; (state.count % 2 === 0 ? \u0026#34;even\u0026#34; : \u0026#34;odd\u0026#34;), }, // Methods (Actions) actions: { increaseCount() { this.count++; }, decreaseCount() { this.count--; }, }, }); ","permalink":"https://blog2.cmwang.net/zh/posts/2023/11/hello-pinia/","summary":"Pinia CheatSheet","title":"Pinia State Management"},{"content":" 微服務與單體架構辯論\n組織結構考慮 DHH 強調選擇微服務或單體架構更多地涉及組織結構而非程式碼組織。微服務適合大團隊，而對於 10 至 100 名開發人員的小團隊，單體架構更簡單、更高效。\n單體架構的簡易性 DHH 主張單體架構的簡易性，表示對於較小的團隊，避免在微服務中替換方法呼叫為網路呼叫的複雜性可以簡化開發。單體架構消除了管理基本功能的網路連線的需要，減少了複雜性並簡化了偵錯過程。\n模式的適用性 DHH 警告不要將為大型組織（如 Netflix）設計的模式應用於較小的團隊，因為這樣做通常會導致不良結果。他認為在沒有相應組織上下文的情況下採用微服務可能會帶來不必要的複雜性。\n宏偉的單體架構 (The Majestic Monolith) DHH 表達了對單體架構的強烈偏好，創造了The Majestic Monolith這一術語。他主張在儘可能長的時間內保持儘可能簡單，並表示單體架構對於較小的開發團隊特別有益。\n","permalink":"https://blog2.cmwang.net/zh/posts/2023/11/dhh-microservice/","summary":"David Heinemeier Hansson: Microservices vs. Monolith","title":"DHH: Microservices vs. Monolith"},{"content":" key differences between opacity: 0, visibility: hidden, and display: none:\nProperty Visibility Layout Interaction opacity: 0 Invisible Yes Yes visibility: hidden Invisible Yes No display: none Hidden No No ","permalink":"https://blog2.cmwang.net/zh/posts/2023/11/css-opacity-visibility-display/","summary":"Unveiling the Veil: Understanding CSS Opacity, Visibility, and Display","title":"CSS 透明度、可見性和顯示的區別"},{"content":"% 百分比 如果用於指定字體大小，則相對於其父元素的字體大小進行測量。 如果用於指定長度，則相對於其父元素的寬度進行測量。 /* 父元素 */ .parent { font-size: 16px; width: 300px; } /* 子元素 */ .child { font-size: 100%; /* 字體大小相對於父元素的字體大小, 16px */ width: 50%; /* 寬度相對於父元素的寬度, 150px */ padding: 1em; /* 內部填充相對於當前的字體大小 16px */ } em (相對 EM) 如果用於指定字體大小，則相對於其父元素的字體大小進行測量。 如果用於指定長度，則相對於當前的字體大小進行測量。 🔥 用 EM 指定長度，需注意是用當前字體大小當基準。若當前沒指定，用繼承來的字體大小當基準。\n/* 父元素 */ .parent { font-size: 16px; width: 300px; } /* 子元素 */ .child { font-size: 2em; /* 字體大小相對於父元素的字體大小 32px */ width: 3em; /* 寬度相對於相對於[當前]的字體 32px x 3 = 96 px 🔥 */ } rem (Root EM) REM (Root EM) 是相對於文檔的 Root element (html 元素) 的字體大小進行測量。 REM 提供了一種統一的基準，使得在整個文檔中可以輕鬆地維護一致的尺寸比例。 /* 設定根元素字體大小 */ html { font-size: 16px; } /* 父元素 */ .parent { font-size: 1rem; /* 字體大小相對於根元素 16px */ width: 300px; } /* 子元素 */ .child { font-size: 2rem; /* 字體大小相對於根元素 32px */ width: 3rem; /* 寬度相對於根元素 48px */ } vw 與 vh (Viewport Width \u0026amp; Height) vw 表示相對於視窗寬度的百分比。 vh 表示相對於視窗高度的百分比。 /* 父元素 */ .parent { font-size: 16px; width: 50vw; /* 寬度相對於視窗寬度的50% */ } /* 子元素 */ .child { font-size: 2em; /* 字體大小相對於父元素的字體大小 32px */ width: 50vh; /* 寬度相對於視窗高度的50% */ } ","permalink":"https://blog2.cmwang.net/zh/posts/2023/11/css-units/","summary":"CSS Units","title":"CSS Units"},{"content":"CSS Reset Do not set the font property in the universal selector. Instead, set it in the body selector for inheritance and performance.\n*, *::before, *::after { margin: 0; padding: 0; box-sizing: inherit; /* border-box */ } html { font-size: 62.5%; /* 10px = 16px * 62.5% */ } body { box-sizing: border-box; /* here */ font-family: ....; font-weight: ...; line-height: ...; color: ...; padding: ...; } Element Center (簡易版) The easiest way to center anything with the transform, top and left properties. .text-box { position: absolute; /* relative to parent container */ top: 50%; left: 50%; transfrom: translate(-50%, -50%); } Faded overlay on image .header { height: 95vh; background-image: linear-gradient( to right bottom, rgba(126, 213, 111, 0.8), rgba(38, 181, 133, 0.8) ), url(img/hero.jpg); /* two layers */ background-size: cover; /* 背景圖片會被縮放以完全覆蓋背景區，可能背景圖片部分看不見 */ background-position: top; /* 縮放時，上半部不會被裁切 */ } Fade in Animation @keyframes moveInLeft { 0% { opacity: 0; transform: translateX(-100px); } 80% { transform: translateX(20px); } 100% { opacity: 1; transform: translate(0); /* reset */ } } .who-need-this-animation { /* animation */ animation-name: moveInLeft; animation-duration: 1s; animation-timing-function: ease-out; } RWD Grid .container { display: grid; grid-template-columns: repeat(auto-fit, minmax(100px, 1fr)); } ","permalink":"https://blog2.cmwang.net/zh/posts/2023/11/css-tricks/","summary":"CSS Tricks (reset, center, faded overlay \u0026hellip;)","title":"CSS Tricks"},{"content":" Behind the scenes when a web page is loaded and rendered:\nLoad HTML\nThe browser starts by fetching and loading the HTML file. Parse HTML\nThe HTML file is parsed to create the Document Object Model (DOM). The DOM represents the structure of the document as a tree of objects, where each object corresponds to a part of the document (e.g., elements, attributes). Load CSS\nIf there are linked or inline stylesheets in the HTML, the browser fetches and loads them. Parse CSS\nThe loaded CSS files are parsed to create the CSS Object Model (CSSOM). This represents the styles and layout information defined in the CSS. Resolve Conflicting CSS Declarations: If there are conflicting CSS declarations (i.e., rules that apply to the same element and property), the browser uses a specific set of rules to determine which styles take precedence. Process Final CSS Values: The browser processes the final computed values for each CSS property, taking into account inheritance, specificity, and other rules. Render Tree\nThe DOM and CSSOM are combined to create the Render Tree. The Render Tree represents the visual hierarchy of the elements on the page that will be rendered. It includes only the elements that will actually be displayed. The Visual Formatting Model\nThe visual formatting model takes the render tree and calculates the layout of each element on the page. This includes determining the size and position of each element based on its CSS properties. The visual formatting model also takes into account factors like the box model (margins, borders, padding), positioning, and floating elements. Render the Page\nFinally, the browser renders the page by painting each pixel according to the specifications of the visual formatting model. Image source: Critical CSS in WordPress: What It Is and How to Optimize CSS Delivery\n","permalink":"https://blog2.cmwang.net/zh/posts/2023/11/css-crp/","summary":"這篇文章只有英文版的","title":"Critical Rendering Path (CRP)"},{"content":" 當你將一個元素的 float 屬性設定為 left 時，它會向左浮動，脫離正常的文件流，被移動到其父元素的左邊。其他文件流中的元素會圍繞著浮動元素的周圍進行佈局。浮動元素之後的內容會填充到浮動元素的右側。\n浮動元素的父元素（如果沒有被清除浮動）可能會發生高度塌陷（height collapse），即父元素的高度不會自動地包含浮動元素。這就是所謂的父元素塌陷問題。為了解決這個問題，可以使用 clear 屬性清除浮動。\n/* 解決 父元素的高度塌陷 */ .clearfix::after { content: \u0026#34;\u0026#34;; display: block; clear: both; } 使用 float 之後，周圍的元素可能會因為浮動元素的存在而受到影響，例如 Footer，可能需要使用 clear 屬性來確保某個元素不會在浮動元素旁邊顯示。\nclear: left|right|both; /* 用 both 就不用管 float 哪邊 */ Reference All About Floats Working With the Float Property in CSS ","permalink":"https://blog2.cmwang.net/zh/posts/2023/11/css-float/","summary":"CSS Float","title":"CSS Float"},{"content":"Position ⚙️ static 元素在文檔流中正常定位，與其他元素一樣 (預設)。 .box { position: static; left: 50px; /* ignore */ top: 50px; /* ignore */ } ⚙️ relative 相對於原始位置移動。 該元素周圍的其他元素仍然會保持原位繞過它，將其視為文件流的一部分，不受影響。 .box { position: relative; left: 50px; right: 50px; } ⚙️ absolute 絕對定位是以最近的父元素為基準點，進行定位。 如果沒有父元素，或者它的父元素沒有設定 static 以外的屬性 (通常用 relative)，它就會以document為基準點進行定位 🔥 頁面捲動會跟著動。 元素會被移出正常文件流，並不為元素預留空間。 .container { position: relative; /* 不能為 static，不然會定位到文檔左上角 */ } .box { position: absolute; left: 50px; right: 50px; } ⚙️ fixed 相對於瀏覽器窗口 (viewport) 進行定位。 即使捲動，還是貼在瀏覽器上方定位。 這種定位方式常用於創建固定在頁面上方或側邊的導航欄、工具欄等元素，使其在用戶滾動頁面時保持可見。 元素會被移出正常文件流，並不為元素預留空間。 .box { position: fixed; left: 50px; right: 50px; } 簡而言之\nImage source: Difference between css position absolute versus relative\n","permalink":"https://blog2.cmwang.net/zh/posts/2023/11/css-position/","summary":"CSS positioning","title":"CSS Positioning"},{"content":"VSCode Extension Web HTML CSS Support (intelligence) CSS Peak (link to style) Prettier (format on save) Highlight Matching Tag Image preview Color highlight (Highlight web colors in your editor) Auto rename tag Live server ESLint Vue Volar (Vue Language Features) PHP PHP Intelephense Python Django General TODO Highlight Chrome Extension Pesticide Vue.js devtools Live Server Web Extension Cheat Sheet CSS ","permalink":"https://blog2.cmwang.net/zh/posts/2023/10/extension-and-more/","summary":"常用的 VSCode 擴充及其他\u0026hellip;","title":"一些擴充及更多"},{"content":"石器時代 (90 年代) 時間軸 1990: 第一個 Web Browser 出現 1994: Navigator 發布 1995: Javascript 由 Brendan Eich 開發 2002: IE 贏得瀏覽器大戰，市佔超過 96% 主流設計概念 MVC，由 Model 負責 Data 除了 html, css, javascript 外，開始用到 JSP 與 Smarty 模板。雖然此時已經可以顯示後端數據，但是此時要刷新整個頁面，耗費頁面載入時間。 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;smarty\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; his name is {$name} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 2004 Google 發布 Gmail，此時可以透過 Ajax 異步獲取數據刷新頁面，前端不再受限後端模板，宣告 Web 2.0 時代到來。 鐵器時代 jQuery 出現，解決瀏覽器兼容性問題，是 jQuery + Bootstrap 的主流時期 $(\u0026#34;#alert-btn\u0026#34;).on(\u0026#34;click\u0026#34;, function () { $(\u0026#34;#app .input\u0026#34;).val(\u0026#34;hi\u0026#34;); }); 2009 年，AngularJS 與 Node.js 誕生，開始了前端的工業革命時代。 工業時代 AngularJS 引領前端的 MVVM 模式的流行，此時 Angular，React，Vue 開始出現 MVVM 將 Controller 變成 View-Model layer，作為 Model 與 View 的橋樑，由 VM 來同步 View 與 Model 層。 前端三大框架比較 主流設計概念 目標一致：數據驅動頁面\n框架比較 Angular1 使用 Dirty Check，只要數據變化，就去更新 DOM 一次。 Angular(2) 向前不相容，引入了 TypeScript 與 RxJS Vue1 響應式，使用 watcher 監聽數據的屬性變化，就可以知道哪個 Key 改變了，再去修改對應的 DOM。 React 在 Browser 的 DOM 之上，提出了 Virtual DOM 概念，使用 Javascript Object 去描述整個 DOM Tree，透過 Virtual DOM 計算出變化的數據，去修改頁面。\n\u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;p class=\u0026#34;item\u0026#34;\u0026gt;item1\u0026lt;/p\u0026gt; \u0026lt;div class=\u0026#34;item\u0026#34;\u0026gt;item2\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; 此時的 Virtual DOM 長成這樣：\n{ \u0026#34;tag\u0026#34;: \u0026#34;div\u0026#34;, \u0026#34;attrs\u0026#34;: { \u0026#34;id\u0026#34;: \u0026#34;app\u0026#34; }, \u0026#34;children\u0026#34;: [ { \u0026#34;tag\u0026#34;: \u0026#34;p\u0026#34;, \u0026#34;attrs\u0026#34;: { \u0026#34;className\u0026#34;: \u0026#34;item\u0026#34; }, \u0026#34;children\u0026#34;: [\u0026#34;item1\u0026#34;] }, { \u0026#34;tag\u0026#34;: \u0026#34;p\u0026#34;, \u0026#34;attrs\u0026#34;: { \u0026#34;className\u0026#34;: \u0026#34;item\u0026#34; }, \u0026#34;children\u0026#34;: [\u0026#34;item2\u0026#34;] } ] } 計算 Diff ，可以減少 DOM 修改，使得效率提高。\nVue 與 React 對比 Vue 情況下，如果數據變化，框架會透過 Watcher 主動告訴你哪些數據變化了。但是當項目大時，太多 Watcher 會影響效能。 Vue2 使用 Virtual DOM 在 Component 內，Component 間使用 watcher 達到響應式更新，從而降低 watcher 數量。 React 情況下，只能透過新舊數據 virtual DOM Diff 被動得知。如果 Virtual DOM Tree 太大，會使得計算時間太久，造成性能卡頓。 React 引入了 Fiber 架構，將 virtual DOM 變成 Chain，利用空閑時間計算 Diff。 ","permalink":"https://blog2.cmwang.net/zh/posts/2023/10/frontend-history/","summary":"回顧前端開發歷史","title":"前端開發歷史"},{"content":"faster-whisper 使用CTranslate2重新實現 OpenAI 的 Whisper 模型，CTranslate2是一個用於 Transformer 模型快速推論的引擎。整體速度提升不少，前提還是要有 GPU。\n以下是產生字幕的簡單範例，請先安裝 faster_whisper 與 pysubs2\ntranscribe without progress bar # pip install faster_whisper pysubs2 from faster_whisper import WhisperModel import pysubs2 model = WhisperModel(model_size = \u0026#39;large-v2\u0026#39;) segments, _ = model.transcribe(audio=\u0026#39;audio.mp3\u0026#39;) # to use pysubs2, the argument must be a segment list-of-dicts results= [] for s in segments: segment_dict = {\u0026#39;start\u0026#39;:s.start,\u0026#39;end\u0026#39;:s.end,\u0026#39;text\u0026#39;:s.text} results.append(segment_dict) subs = pysubs2.load_from_whisper(results) subs.save(\u0026#39;output.srt\u0026#39;) #save srt file 我們可以這樣改寫，讓他透過 tqdm 產生進度條\ntranscribe with progress bar from faster_whisper import WhisperModel import pysubs2 model = WhisperModel(model_size = \u0026#39;large-v2\u0026#39;) segments, _ = model.transcribe(audio=\u0026#39;audio.mp3\u0026#39;) # Prepare results for SRT file format results = [] timestamps = 0.0 # for progress bar with tqdm(total=info.duration, unit=\u0026#34; audio seconds\u0026#34;) as pbar: for seg in segments: segment_dict = {\u0026#39;start\u0026#39;: seg.start, \u0026#39;end\u0026#39;: seg.end, \u0026#39;text\u0026#39;: seg.text} results.append(segment_dict) # Update progress bar based on segment duration pbar.update(seg.end - timestamps) timestamps = seg.end # Handle silence at the end of the audio if timestamps \u0026lt; info.duration: pbar.update(info.duration - timestamps) subs = pysubs2.load_from_whisper(results) subs.save(\u0026#39;output.srt\u0026#39;) #save srt file 順便附上 Docker file\nDockerfile # Use the official NVIDIA CUDA image as the base image FROM nvidia/cuda:11.8.0-cudnn8-runtime-ubuntu20.04 ARG DEBIAN_FRONTEND=noninteractive # Install necessary dependencies RUN apt-get update \u0026amp;\u0026amp; apt-get install -y \\ wget \\ python3 \\ python3-pip \\ \u0026amp;\u0026amp; apt-get clean \\ \u0026amp;\u0026amp; rm -rf /var/lib/apt/lists/* # Set the working directory inside the container WORKDIR /app # Install required Python packages RUN pip install faster_whisper pysubs2 # Create directories to store the models RUN mkdir -p /models/faster-whisper-medium # Download the medium model using wget to the specified directory RUN wget -O /models/faster-whisper-medium/config.json https://huggingface.co/guillaumekln/faster-whisper-medium/resolve/main/config.json \u0026amp;\u0026amp; \\ wget -O /models/faster-whisper-medium/model.bin https://huggingface.co/guillaumekln/faster-whisper-medium/resolve/main/model.bin \u0026amp;\u0026amp; \\ wget -O /models/faster-whisper-medium/tokenizer.json https://huggingface.co/guillaumekln/faster-whisper-medium/resolve/main/tokenizer.json \u0026amp;\u0026amp; \\ wget -O /models/faster-whisper-medium/vocabulary.txt https://huggingface.co/guillaumekln/faster-whisper-medium/resolve/main/vocabulary.txt COPY app.py /app/ # Run script CMD [\u0026#34;python3\u0026#34;, \u0026#34;app.py\u0026#34;] Source Code: https://github.com/taka-wang/docker-whisper\n","permalink":"https://blog2.cmwang.net/zh/posts/2023/10/faster-whisper-in-python3/","summary":"如何使用 faster-whisper 並產生進度條，你可以用它來幫影片自動產生字幕","title":"帶有進度條的 Faster Whisper"},{"content":"Uninstall Docker sudo systemctl stop docker sudo apt remove --purge -y docker-ce docker-ce-cli containerd.io sudo rm -rf /var/lib/docker sudo rm -rf /etc/docker sudo rm -rf /etc/apt/sources.list.d/docker.list sudo rm -rf /usr/share/keyrings/docker-archive-keyring.gpg sudo apt update docker --version Install Docker (Ubuntu 22.04) sudo apt update sudo apt install -y \\ apt-transport-https \\ ca-certificates \\ curl \\ gnupg-agent \\ software-properties-common curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg echo \u0026#34;deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\u0026#34; | sudo tee /etc/apt/sources.list.d/docker.list \u0026gt; /dev/null sudo apt update sudo apt install -y docker-ce docker-ce-cli containerd.io # post install sudo systemctl status docker sudo usermod -aG docker ${USER} Move Docker Data to Another Location sudo systemctl stop docker sudo systemctl status docker # ex: /data/ is another disk, don\u0026#39;t create docker-data folder in advanced sudo rsync -avxP /var/lib/docker/ /data/docker-data # edit daemon.json with `data-root` line sudo nano /etc/docker/daemon.json { \u0026#34;data-root\u0026#34;: \u0026#34;/data/docker-data\u0026#34;, \u0026#34;runtimes\u0026#34;: { \u0026#34;nvidia\u0026#34;: { \u0026#34;args\u0026#34;: [], \u0026#34;path\u0026#34;: \u0026#34;nvidia-container-runtime\u0026#34; } } } sudo systemctl restart docker sudo systemctl enable docker # verify docker info -f \u0026#39;{{ .DockerRootDir}}\u0026#39; Install Nvidia Driver \u0026amp; Cuda wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-ubuntu2204.pin sudo mv cuda-ubuntu2204.pin /etc/apt/preferences.d/cuda-repository-pin-600 wget https://developer.download.nvidia.com/compute/cuda/12.2.2/local_installers/cuda-repo-ubuntu2204-12-2-local_12.2.2-535.104.05-1_amd64.deb sudo dpkg -i cuda-repo-ubuntu2204-12-2-local_12.2.2-535.104.05-1_amd64.deb sudo cp /var/cuda-repo-ubuntu2204-12-2-local/cuda-*-keyring.gpg /usr/share/keyrings/ sudo apt-get update sudo apt-get -y install cuda Install Nvidia Docker Toolkit curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey | sudo gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg \\ \u0026amp;\u0026amp; curl -s -L https://nvidia.github.io/libnvidia-container/stable/deb/nvidia-container-toolkit.list | \\ sed \u0026#39;s#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g\u0026#39; | \\ sudo tee /etc/apt/sources.list.d/nvidia-container-toolkit.list \\ \u0026amp;\u0026amp; \\ sudo apt-get update sudo apt-get install -y nvidia-container-toolkit sudo systemctl restart docker # verify docker run --rm --gpus all nvidia/cuda:11.6.2-base-ubuntu20.04 nvidia-smi Install Docker Compose # https://docs.docker.com/compose/install/ sudo curl -L \u0026#34;https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)\u0026#34; -o /usr/local/bin/docker-compose sudo chmod +x /usr/local/bin/docker-compose References CUDA Toolkit 12.2 Update 2 Downloads 安裝 Nvidia driver 535 CUDA 12.2 cudnn 12.x on Ubuntu 22.04 ","permalink":"https://blog2.cmwang.net/zh/posts/2023/10/install-nvidia-docker-for-ubuntu/","summary":"這篇文章只有英文版的","title":"在 Ubuntu 安裝 Nvidia Docker"},{"content":" 使用 System Volumn 掛載 Runner Container，執行 Gitlab Runner。 docker run -d --name gitlab-runner --restart always \\ -v /srv/gitlab-runner/config:/etc/gitlab-runner \\ -v /var/run/docker.sock:/var/run/docker.sock \\ gitlab/gitlab-runner:latest 建立一個新的 Group runner。 👉 新增 Group runner 標籤\n👉 獲取 token\n更詳細的步驟可以參考這篇文章。\n註冊 Runner 別忘了將 Token 換成上一步得到的。\nRUNNER_TOKEN=\u0026#34;glrt-vTJPYBaajfypaShJH2xx\u0026#34; docker run --rm -v /srv/gitlab-runner/config:/etc/gitlab-runner gitlab/gitlab-runner register \\ --non-interactive \\ --url \u0026#34;https://gitlab.com/\u0026#34; \\ --token \u0026#34;$RUNNER_TOKEN\u0026#34; \\ --executor \u0026#34;docker\u0026#34; \\ --docker-image docker:stable-dind \\ --description \u0026#34;docker-runner\u0026#34; 編輯 /srv/gitlab-runner/config/config.toml 修改以下配置：\nconcurrent：可選 privileged volumes：docker 內部的 docker network_mode：可選 /srv/gitlab-runner/config/config.toml concurrent = 4 # 更改 check_interval = 0 shutdown_timeout = 0 [session_server] session_timeout = 1800 [[runners]] name = \u0026#34;docker-runner\u0026#34; url = \u0026#34;https://gitlab.com/\u0026#34; id = 28470179 token = \u0026#34;glrt-vTJPYBaajfypaShJH2Ge\u0026#34; token_obtained_at = 2023-10-14T12:45:43Z token_expires_at = 0001-01-01T00:00:00Z executor = \u0026#34;docker\u0026#34; [runners.cache] MaxUploadedArchiveSize = 0 [runners.docker] tls_verify = false image = \u0026#34;docker:stable-dind\u0026#34; privileged = true # 更改 disable_entrypoint_overwrite = false oom_kill_disable = false disable_cache = false #volumes = [\u0026#34;/cache\u0026#34;] # 更改 volumes = [\u0026#34;/cache\u0026#34;, \u0026#34;/var/run/docker.sock:/run/docker.sock\u0026#34;] shm_size = 0 network_mode = \u0026#34;host\u0026#34; # 新增 重新啟動 Runner docker restart gitlab-runner 參考資料 Install GitLab Runner Run GitLab Runner in a container Registering runners Create a group runner with a runner authentication token ","permalink":"https://blog2.cmwang.net/zh/posts/2023/10/install-gitlab-runner/","summary":"如何在本機透過 Docker 安裝 Gitlab runner","title":"透過 Docker 設定 Gitlab Runner"},{"content":"安裝 Powerlevel10K 🚀 sudo apt update sudo apt install zsh # 安裝 Oh My Zsh： sh -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\u0026#34; # 安裝主題 git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ~/.oh-my-zsh/custom/themes/powerlevel10k 安裝 Zsh：\n如果你沒有安裝 Zsh，請使用以下命令安裝：\nsudo apt update sudo apt install zsh 安裝 Oh My Zsh：\n執行以下命令安裝 Oh My Zsh：\nsh -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\u0026#34; 安裝 Powerlevel10k 主題：\n將 Powerlevel10k Repo Clone 到 Oh My Zsh 的自定義主題目錄：\ngit clone --depth=1 https://github.com/romkatv/powerlevel10k.git ~/.oh-my-zsh/custom/themes/powerlevel10k 設定 Zsh 主題：\n開啟你的 ~/.zshrc 檔案：\nnano ~/.zshrc 找到以 ZSH_THEME 開頭的那一行，並將其改為：\nZSH_THEME=\u0026#34;powerlevel10k/powerlevel10k\u0026#34; 儲存檔案並退出。\n安裝所需字型：\nPowerlevel10k 使用特殊字元，因此你需要安裝包含這些字元的字型。Nerd Fonts 是常用的選擇。按照 Nerd Fonts GitHub 倉庫 上的說明安裝相容的字型。\n配置 Powerlevel10k（可選）：\n當你啟動新的 Terminal 時，Powerlevel10k 將提供執行配置引導的選項。按照指示自定義你的提示符。\n重啟 Zsh：\n重新啟動你的 Terminal，或者執行 source ~/.zshrc 以套用更改。\n現在，Powerlevel10k 應該已經在你的 Ubuntu 22.04 系統上安裝並配置完成。\n安裝 zsh-autosuggestions 🚀 Powerlevel10k 不會改變 Zsh 在自動補齊的預設行為；它主要增強和自定義提示符的外觀。自動補齊的行為主要由 Zsh 配置控制。\n如果你想在 Zsh 的自動補齊啟用建議，你可以使用 zsh-autosuggestions 外掛。該外掛提供類似 fish 的提示，與 Powerlevel10k 配合使用效果很好。\n以下是安裝和配置 zsh-autosuggestions 的步驟：\n安裝 zsh-autosuggestions：\n你可以使用你喜歡的方法安裝它。一個常見的方法是透過外掛管理器，比如 oh-my-zsh。\n如果你使用 oh-my-zsh，你也可以手動克隆倉庫：\ngit clone https://github.com/zsh-users/zsh-autosuggestions ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions 啟用 zsh-autosuggestions：\n更新你的 ~/.zshrc 檔案以啟用該外掛。在 plugins 行中新增或修改 zsh-autosuggestions。\nplugins=(zsh-autosuggestions) 重啟 Zsh 或重新載入配置：\n重新啟動你的 Terminal，或者執行以下命令以應用更改：\nsource ~/.zshrc 現在，當你鍵入時，你應該會看到基於你的命令歷史的自動建議。\n","permalink":"https://blog2.cmwang.net/zh/posts/2023/10/install-powerlevel10k-on-ubuntu/","summary":"記錄如何在 Ubuntu 設定 zsh 與 Powerlevel10k 及 zsh-autosuggestions","title":"在 Ubuntu 設定 Powerlevel10k"},{"content":"在 Github pages 上設定 CNAME 不用額外付費，只是你需要先擁有一個私人域名。這邊假定我們已經在 Godaddy 購買了域名，所以先到 Godaddy DNS 設定頁面設定。\n先透過 Terminal 查詢 Github 的 IP 地址。 dig {Your Domain}.github.io dig xxxx.github.io 到 Godaddy DNS 頁面設定 4 個 A Record，1 個 CNAME Record，請參考圖片。 在私人存儲庫中添加 CNAME 文件，內容為 xxx.{Domain Name}，例如 blog.xxx.com。 在頁面內設定 CNAME 並打勾 Enforce HTTPS。 需要一點時間才會生效，如果一切都正常，第四步驟的 DNS Check 應該會通過。\nReferences Managing a custom domain for your GitHub Pages site ","permalink":"https://blog2.cmwang.net/zh/posts/2023/10/custom-domain-for-github-pages/","summary":"這篇文章記錄如何為 Github Page 設定自訂網域，以 Godaddy 為例","title":"為 GitHub Pages 網站設定自訂網域"},{"content":"歡迎使用 Hugo 快速建立個人網站！這個指南將引導你完成在 GitHub 上建立私人網站並部署到 GitHub Pages 的過程。\n這個指南包括什麼重點 .gitignore: 排除版本管理的檔案 .github/workflows/hugo.yml: 使用 GitHub Action 將私人 Hugo 存放庫部署到公開的 GitHub Pages 存放庫。 步驟 在 GitHub 建立一個私人儲存庫 hugo-site 來管理你的網站原始碼，請記得包含 README.md 檔案。\n在 GitHub 建立一個公開儲存庫 {YOUR_USER_NAME}.github.io 來上傳你的靜態網頁到 GitHub Pages。\n將 hugo-site 複製到本地：\ngit clone https://github.com/{YOUR_USER_NAME}/hugo-site.git 或者，如果你已經使用了 Git Submodule，可以使用以下方式複製：\ngit clone --recursive https://github.com/{YOUR_USER_NAME}/hugo-site.git 在 hugo-site 的同一層目錄創建 Hugo 專案（不要放在 hugo-site 裡面）：\nhugo new site hugo-site --force --format yaml 新增範例主題，這邊以 PaperMod 為例：\nAdd theme cd hugo-site git submodule add --depth=1 https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod echo \u0026#34;theme : \u0026#39;PaperMod\u0026#39;\u0026#34; \u0026gt;\u0026gt; hugo.yaml 將 .gitignore 檔案複製到 hugo-site。\n[可選] 新增 GitHub Action 自動部署：\nmkdir -p .github/workflows/ touch .github/workflows/hugo.yml 將 hugo.yml 的內容複製到上述新增的空白 hugo.yml。請記得修改以下兩處：\ntoken: ${{ secrets.ACCESS_TOKEN }}: 在這裡使用私人儲存庫的存取權杖（Access Token）。 repository-name: YOUR_USER_NAME/YOUR_USER_NAME.github.io: 將 YOUR_USER_NAME 改為你的 GitHub 帳號名稱。 測試 Hugo 網站：\nhugo server -D 開始創建自己的文章：\nhugo new posts/20231006/index.md 在 content/posts/20231006 裡面的 index.md 開始撰寫，並將圖片放在同一個資料夾。\n恭喜你，已經完成私人儲存庫的設定，請不要忘記將變更提交到私人儲存庫。\n參考資料 如何設定 ACCESS Token 使用 GitHub Actions 將 Hugo 網站從私人儲存庫發佈到公開頁面 Hugo 教學 \u0026ndash; 基礎篇 學習在幾分鐘內創建 Hugo 網站。 ","permalink":"https://blog2.cmwang.net/zh/posts/2023/10/hugo-deployment-guide/","summary":"這個指南將引導你完成在 GitHub 上建立私人網站並部署到 GitHub Pages 的過程","title":"Hugo 部署指南"},{"content":"MacOS 透過 Homebrew Package Manager 安裝是最方便的\nInstall Packages with Homebrew on macOS # install homebrew /bin/bash -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\u0026#34; # install hugo brew install hugo # verify hugo installation hugo version \u0026gt; hugo v0.119.0-b84644c008e0dc2c4b67bd69cccf87a41a03937e+extended darwin/amd64 BuildDate=2023-09-24T15:20:17Z VendorInfo=brew Windows 以工作管理員開啟 powershell win + x 游標上下選擇到 windows powershell (工作管理員)，記得要選擇超級管理員的權限。\n確認執行權限：\nGet-ExecutionPolicy 如果顯示 Ristricted，則再執行以下指令：\nSet-ExecutionPolicy AllSigned 安裝 chocolatey：\nSet-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString(\u0026#39;https://chocolatey.org/install.ps1\u0026#39;)) 確認是否安裝完成，在 powershell 輸入：\nchoco # 如果有正常回覆，即安裝完成 接著就可以透過 choco 安裝 hugo 囉！👇👇👇\nInstall Packages with Chocolatey on Windows # install hugo choco install hugo-extended # verify hugo installation hugo version \u0026gt; hugo v0.119.0-b84644c008e0dc2c4b67bd69cccf87a41a03937e... References Install Hugo on macOS Install Hugo on Windows 我的 Windows 新裝機 Chocolatey 安裝清單 ","permalink":"https://blog2.cmwang.net/zh/posts/2023/10/how-to-install-hugo/","summary":"這篇文章會介紹如何安裝 Hugo 環境","title":"如何安裝 Hugo 環境"},{"content":"Ken Lin 是我的朋友，這是他的 AI Clone 版不同凡響 (Think Different)。\n","permalink":"https://blog2.cmwang.net/zh/posts/2023/10/think-different-ai-ken/","summary":"此AI生成的旁白僅供娛樂，嚴禁商業使用。","title":"不同凡響 - AI (Ken Lin)"},{"content":"經過幾天的實驗，正式將 Blog 重啟在 Github Pages，總是思考要在什麼平台紀錄或者該熟悉怎樣的格式，都比不上持續記錄的實在。\n有個可以掌握在自己手中的筆記本，除了可以抒發心情也可以記錄學習的點滴。Hugo 真的是一個很棒的工具，整體體驗比起多年前的 Hexo 好很多，接下來我會分享幾篇如何自己動手配置的簡單紀錄。\n","permalink":"https://blog2.cmwang.net/zh/posts/2023/10/blog-reboot-2023/","summary":"2023 重新回到靜態網頁的懷抱，Hugo 讓人感覺愉快。","title":"搬回 Github Pages"},{"content":"重新開始 # 用這樣夾 youtube {{ \u0026lt; youtube d9IxdwEFk1c \u0026gt; }} 我們開始吧！\nimport sys from PyQt5.QtWidgets import QApplication, QLabel, QMainWindow, QVBoxLayout, QWidget class HelloWorldApp(QMainWindow): pass if __name__ == \u0026#39;__main__\u0026#39;: app = QApplication(sys.argv) window = HelloWorldApp() window.show() sys.exit(app.exec_()) 另一個測試\nSet some variables import sys from PyQt5.QtWidgets import QApplication, QLabel, QMainWindow, QVBoxLayout, QWidget class HelloWorldApp(QMainWindow): pass if __name__ == \u0026#39;__main__\u0026#39;: app = QApplication(sys.argv) window = HelloWorldApp() window.show() sys.exit(app.exec_()) 警告\nThis is a warning notice.. Be warned!\n\u003c!DOCTYPE html\u003e ","permalink":"https://blog2.cmwang.net/zh/posts/2023/10/hugo-test/","summary":"重新開始 # 用這樣夾 youtube {{ \u0026lt; youtube d9IxdwEFk1c \u0026gt; }} 我們開始吧！ import sys from PyQt5.QtWidgets import QApplication, QLabel, QMainWindow, QVBoxLayout, QWidget class HelloWorldApp(QMainWindow): pass if __name__ == \u0026#39;__main__\u0026#39;: app = QApplication(sys.argv) window = HelloWorldApp() window.show() sys.exit(app.exec_()) 另一個測試 Set some variables import sys from PyQt5.QtWidgets import QApplication, QLabel, QMainWindow, QVBoxLayout, QWidget class HelloWorldApp(QMainWindow): pass if __name__","title":"Hugo 測試"},{"content":" Image Source: https://www.instagram.com/p/CpsSwuNv8AH/\n《重啟人生》（ブラッシュアップライフ）是今年度最熱門的日劇之一，它深深觸動了許多人的心靈。劇中融合了許多平成時代的經典元素，還有不少時代的眼淚，如 BB Call、たまごっち、Game Boy Advance 等等，勾起了人們對於往日時光的美好回憶。此外，這部劇的音樂也十分講究，其中的懷舊日文歌曲更是讓人回想起那些年輕時的種種。故事情節描寫了一生摯友之間的真摯情誼與日常間的閒聊，故事相當令人感動。\n重啟人生_歌單 這部劇的編劇 バカリズム 過往曾經創作出類似主題的作品，例如《素敵な選 TAXI》，個人也是很推薦這個輕鬆小品。我在觀影的過程中，也不免聯想到另外兩部相關題材的作品，分別是年代有點久遠的日劇《Loss:Time:Life》（ロス：タイム：ライフ） 和近期的韓劇《認識的妻子》（아는와이프），都是發人省思也很有意思的影集。這些穿越或者平行宇宙的影集雖然著重的內容不同，但《重啟人生》卻不同於其他類似作品，它並不著重於人生的懊悔與補救，反而像是掉入不同平行宇宙的時空旅者，重新再過一次不同的人生。雖然在世界觀的設定上可能會讓人有點困惑，感覺好像有一些 Bug，但請帶著愉悅的心情，盡情享受這部滿滿懷舊風日劇想傳達的故事即可。\nロス:タイム:ライフ\nFamiliar Wife | Korea | Drama | Watch with English Subtitles \u0026amp; More ✔️\n當影片中響起 ZARD 的《負けないで》時，我的內心不禁感到激動和感傷。坂井泉水的音樂曾經陪伴我度過青澀孤單的學生時光，懷舊音樂真的為本劇加分不少，每每都將人帶回那個單純的年代。\n主人公在劇中每一次的重生都是為了能夠重新投胎成為人類，因此，他重新努力積福做好事，從一開始的小愛（為自己）轉變成大愛（為別人），這種不斷重生並自我優化的過程，雖然有點荒誕搞笑，卻是笑中帶淚的觸動人心。這也讓我們反思，為什麼重新投胎成為人類就是最好的選擇呢？那是不是因為我們自己帶著人類中心主義的想法，亦或者是因為人類本身的優越感使然？這也影響著我們該如何好好度過此生。\n《重啟人生》給觀眾帶來了很多的思考和感動。它讓人們重新思考自己的生命意義和價值，讓人們意識到生命的珍貴與有限。這部影集讓我們重新回顧過去的歲月，回憶那些美好的時光，同時也讓人們重新思考未來的方向，是值得一看的感人作品。\n","permalink":"https://blog2.cmwang.net/zh/posts/2023/04/brush-up-life/","summary":"《重啟人生》（ブラッシュアップライフ）是今年度最熱門的日劇之一，它深深觸動了許多人的心靈。","title":"重啟人生 | BRUSH UP LIFE"},{"content":" 青梅\n近年來，清明節前後一直是我們家重要的儀式，我們會在年初與信義鄉的小農預訂 12 公斤青梅，並以此製作脆梅。然而，今年由於雨量不足，果實相較於往年稍嫌不盡人意。\n製作脆梅的方式相當簡單，不需要複雜的器材，只需花費一些時間與耐心。配方非常簡單，以一公斤青梅、100 克粗鹽和 600 克砂糖的比例進行製作。接下來，請依照以下步驟進行：\n青梅和鹽一起搓揉\n清洗：去掉梅子的蒂頭，一顆顆挑除。 殺青：使用粗鹽幫助梅子 SPA，搓揉至少 15 分鐘，直到表面濕潤變色。 敲梅子：用槌子一顆顆敲打至微裂，千萬別敲碎了。 泡鹽水 8 小時：務必確保鹽水完全覆蓋住梅子。 換水 8 小時：每二到三小時更換一次水。 加糖水：每天更換新的糖水，覆蓋住梅子，重複三天。換糖水的過程頗為重要，要小心謹慎，以免影響口感。 去掉苦澀糖水：將所有的苦澀糖水倒掉，取代為最後一次的糖水，再等待三天，即可完成製作。 我感激家人為生活帶來的儀式感，這種感覺讓我感受到生命的美好。\n脆梅成品\n","permalink":"https://blog2.cmwang.net/zh/posts/2023/04/make-crispy-plum/","summary":"製作脆梅一直是我們家重要的儀式，每年我們都會在年初與信義鄉的小農預訂青梅，並以此製作脆梅。","title":"製作脆梅的時節"},{"content":" Today you will have a good day. Jesus spoke to them at once, “Don’t be afraid,” he said. “Take courage! I am here!” (Mark 6:50)\n","permalink":"https://blog2.cmwang.net/zh/posts/2023/04/you-will-have-a-good-day/","summary":"這篇文章只有英文版的","title":"今天你會有好事發生"},{"content":" As I reflect on my five years in this company, I realize how much has happened and how much I have grown. From having a supervisor to being a lone ranger, to forming a small team and eventually founding the Nilvana, time has flown by quickly, and I am left wondering where tomorrow will take me.\nIt seems like just yesterday that I started my journey in this company. I remember the excitement of meeting new colleagues, learning new skills, and finding my place in the organization. Over time, I became more confident and began taking on more responsibilities. I was proud of my accomplishments and the impact that I was making.\nHowever, the road was not always easy. There were times when I faced challenges that made me question my abilities and my decisions. I learned that setbacks and failures are a part of the journey, and they can be a source of growth and resilience.\nOne of the most significant moments in my journey was the creation of the Nilvana brand. It was a leap of faith, but I knew that I had a vision that could change the game. With the help of a few dedicated team members, we worked tirelessly to bring the brand to life. Seeing it take off and gain recognition was one of the proudest moments of my career.\nLooking back on my journey, I realize that time truly flies. It seems like just yesterday that I started, but five years have gone by in a blink of an eye. As I prepare to take on new challenges, I am grateful for the experiences and the lessons that I have learned.\n","permalink":"https://blog2.cmwang.net/zh/posts/2023/03/reflections-on-five-years-in-the-company/","summary":"這篇文章只有英文版的","title":"在公司五年的回顧"},{"content":" This post explains how to increase the buffer memory for USB-FS devices on Linux systems in order to make full use of the imaging hardware’s capabilities. By default, USB-FS on Linux systems only allows 16 MB of buffer memory for all USB devices, which may not be sufficient for high-resolution cameras or multiple-camera set ups, resulting in image acquisition issues. To configure USB-FS and increase the buffer memory limit, the following steps should be taken:\nNote that GRUB is for desktop PC architecture. ARM embedded systems use a different bootloader, as GRUB requires a system with a BIOS, and embedded systems do not have one.\nCreate the file /etc/rc.local with the command sudo touch /etc/rc.local. This will create the file, allowing it to be edited. Change the permissions of the file with the command sudo chmod 744 /etc/rc.local. This will ensure that the file has the correct permissions to be edited. Change the buffer memory limit with the command echo 1000 \u0026amp;gt; /sys/module/usbcore/parameters/usbfs_memory_mb. This command will set the memory limit to 1000 MB, which should be enough to prevent image acquisition issues.` /etc/rc.local file contents example /etc/rc.local #!/bin/sh -e echo 1000 \u0026gt; /sys/module/usbcore/parameters/usbfs_memory_mb exit 0 After changing the memory limit, it is important to confirm the changes have been made correctly. This can be done by running the command:\ncat /sys/module/usbcore/parameters/usbfs_memory_mb which will display the current memory limit. If the limit is still 16 MB, then the changes will need to be made again. Additionally, further information about USB-FS on Linux can be found in the following sources:\nUnderstanding USBFS on Linux Increase USBFS Memory Limit in Ubuntu Change Kernel Cmdline by Edit /etc/default/grub Failed ","permalink":"https://blog2.cmwang.net/zh/posts/2022/12/configuring-usb-fs-for-usb3-vision-camera/","summary":"這篇文章只有英文版的","title":"配置USB-FS以適用於USB3 Vision相機"},{"content":" Real-time object detection with CoreML is trickier than you think.\nUsually, you have two choices to build a machine learning app for your mobile device, inference can happen either directly on-device or on cloud-based servers. It all depends on your usage scenario, there is no one-size fit all solution. In this article, we will only focus on on-device inference.\nAt WWDC 2017 Apple released first Core ML. Core ML is Apple’s machine learning framework for doing on-device inference. Core ML is not the only way to do on-device inference, there are tens of libraries and frameworks that are compatible with iOS, but that’s beyond the scope of this article. From the YOLOv7 official repository, we can get the export script to convert trained PyTorch model to Core ML format effortlessly. However, keep one thing in mind, YOLOv7 is a popular open source project, new changes and updates are added very quickly. I’m also very glad to send a PR to improve the export script last night due to this writing 😃.After you got the exported Core ML models, no kidding, you have tons of things in your todo list. Matthijs Hollemans has already written an insightful article in his blog, be sure to checkout and support his efforts! Here is my short list:\nConfigure your Core ML model in a particular way. You can either append NMS to your model or write a lot of additional Swift code. IMHO, this is the most difficult part if you know nothing about the object detection model. Specify camera resolution, don’t simply select the highest resolution available if your app doesn’t require it. Resize or crop your input image to fit network input dimension, it depends on your application. Feed modified images to your model in a correct orientation. Fix Vision’s weird orin. Convert bounding boxes coordinate system for display. This is also a trickier part, you need some iOS development experiences and a pencil for calculation 😎. According to Hollemans’s article, there are at least 5 different coordinate systems you need to take care, not to mention how to handle real-time capturing correctly and efficiently is also non-trivial. You can follow these two articles to learn how to create a custom camera view.\nApple Developer Documentation | Recognizing Objects in Live Capture\nCreating a Custom Camera View | CodePath iOS Cliffnotes At the latest WWDC 2022, Apple introduced even more performance tools to its CoreML toolchain, now you can check your model’s metadata via performance reports and Core ML Instrument without writing any code. You can also use computeUnits = .cpuAndNeuralEngine if you don’t want to use the GPU but always force the model to run on the CPU and ANE if available.\nPrefer CPU and ANE instead of GPU.\nYou can learn more about ANE from the following repository, thank you again Hollemans.\nGitHub - hollance/neural-engine: Everything we actually know about the Apple Neural Engine (ANE)\nHere are snapshots from my model’s performance reports.\nYou can evaluate your model via drag-and-drop image files.\nThere is no significant inference speed differences among quantization models, but the model size only about half the size. It’s a good thing for your mobile applications. No inference speed improved. (Left is FP32, right is FP16)\nHalf the size of the FP32 model.\nFinally, you have a working YOLOv7 Core ML model on the iOS devices, be careful of the heat🔥. Happy coding!\nYolov7-tiny on iPad Mini 6. Copyrights of BBIBBI Dance Practice belongs Kakao Entertainment.\nReferences Recognizing Objects in Live Capture How to display Vision bounding boxes Creating a Custom Camera View The Neural Engine — what do we know about it? WongKinYiu/yolov7 WWDC2022 — Optimize your Core ML usage MobileNetV2 + SSDLite with Core ML yolov5 — CoreML Tools ","permalink":"https://blog2.cmwang.net/zh/posts/2022/08/execute-yolov7-model-on-ios-devices/","summary":"這篇文章只有英文版的","title":"透過 CoreML 在 iOS 上實現即時的物體偵測"},{"content":" YOLOv7 TensorRT Performance Benchmarking.\nObject detection is one of the fundamental problems of computer vision. Instead of region detection and object classification separately in two stage detectors, object classification and bounding-box regression are done directly without using pre-generated region proposals in one stage detectors. YOLO (You Only Look Once) is one of the representative models of one-stage architecture. The YOLO family has continued to evolve since 2016, this summer we’ve got its latest update to version 7.\nGitHub - WongKinYiu/yolov7: Implementation of paper - YOLOv7: Trainable bag-of-freebies sets new…\nIf you are trying to learn how to train your model on a custom dataset from the beginning, there are already many tutorials, notebooks and videos available online. In Nilvana, we really care about its real-world performance on the embedded devices, especially Nvidia Jetson family devices. So we conducted a series performance testing of YOLOv7 variants models on different devices, from cloud GPUs A100 to the latest tiny powerhouse AGX Orin.\nNVIDIA® Jetson AGX Orin™ Developer Kit: smallest and most powerful AI edge computer\nThe main reason YOLOv7 is more accurate, compare to other models with similar AP, YOLOv7 has only about half computational cost. — WongKinYiu \u0026gt; Input and Output shape of YOLOv7 (80 class)\nAccording to the results table, Xavier NX can run YOLOv7-tiny model pretty well. AGX Orin can even run YOLOv7x model more than 30 FPS, it’s amazing!\nEnd-to-End Performance on 1080P video, Batch Size=1\nPerformance Benchmarking Playlist\n","permalink":"https://blog2.cmwang.net/zh/posts/2022/07/performance-benchmarking-of-yolov7-tensorrt/","summary":"這篇文章只有英文版的","title":"YOLOv7 TensorRT 的性能測試"},{"content":"學習目標：\nGesture Recognizer CALayer \u0026amp; UIBezierPath Class \u0026amp; Function 練習成果：\n原始碼：\nGitHub - takawang/olympic-drone\n緣起：\n這次的練習，主要是看到下面這篇文章的啟發，不過我簡化了觸模散開與加速度這個部分，主要是練習 swift 實作。\n[Vanilla JS] 평창올림픽 드론쇼 만들기\n說明：\n實作的構想還算直覺，除了長壓連續觸發需要研究一下。\n使用 javascript 的 canvas getImageData() 將 SVG 存成 json 檔 (可參考上文連結中的 getDotPos 方法。 在 swift 中，透過讀取 json 檔，存成座標點的類別陣列，這兩步驟也可以用來畫其他圖案，不用手工一直描點。 load all points from json file import UIKit // Point definition for json object class Point: Decodable { let x, y: Int let color: String // load all points from json file. // // ref: https://stackoverflow.com/a/50042872 // ref: https://praveenkommuri.medium.com/how-to-read-parse-local-json-file-in-swift-28f6cec747cf static func loadFromJson(fileName name: String) -\u0026gt; [Point] { do { guard let filePath = Bundle.main.path(forResource: name, ofType: \u0026#34;json\u0026#34;) else { return [] } let fileUrl = URL(fileURLWithPath: filePath) let data = try Data(contentsOf: fileUrl) let points = try JSONDecoder().decode([Point].self, from: data) return points } catch { // should not happen! print(\u0026#34;Something went wrong: \\(error)\u0026#34;) return [] } } } 設計 Drone 類別，讓 Drone 初始位置是隨機的，目的位置是剛剛載入的圖形座標。 將兩座標分成 20 份，持續按壓連續觸發時，一次移動一份。 當到達目的座標時，改變 Drone 的顏色。 handle long press event import UIKit class ViewController: UIViewController { var touchCountTimer: Timer? var touchBeginTime: Double = 0 let droneCollection = DroneCollectionController(fromJsonFile: \u0026#34;ring\u0026#34;) // composition override func viewDidLoad() { super.viewDidLoad() droneCollection.attachToLayer(to: self.view.layer) // attach drone layer addLongPressGesture() // handle press } // register gesture recognizer // // ref: [How can i count time on long-pressed button using UILongPressGestureRecognizer](https://stackoverflow.com/a/53146530) func addLongPressGesture(){ let longPress = UILongPressGestureRecognizer(target: self, action: #selector(longPress(gesture:))) longPress.minimumPressDuration = 0.1 longPress.numberOfTouchesRequired = 1 self.view.addGestureRecognizer(longPress) } // handle long press event // // ref: [How can i count time on long-pressed button using UILongPressGestureRecognizer](https://stackoverflow.com/a/53146530) @objc func longPress(gesture: UILongPressGestureRecognizer) { switch gesture.state { case UIGestureRecognizer.State.began: touchCountTimer = Timer.scheduledTimer(withTimeInterval: 0.1, repeats: true, block: { [self] (timer) in // MARK: - do animation droneCollection.animation() }) touchBeginTime = Date().timeIntervalSince1970 case .ended, .failed, .cancelled: touchCountTimer?.invalidate() // Stops the timer DroneCollectionController.isArrived = false case .changed: // wipe break default: print(\u0026#34;unknown\u0026#34;) } } } ","permalink":"https://blog2.cmwang.net/zh/posts/2022/03/simulated-olympic-rings-drone-light-show/","summary":"練習 CALayer \u0026amp; Gesture Recognizer@","title":"模擬奧運五環無人機燈光秀"},{"content":"學習目標：\nAVPlayer NotificationCenter Timer Swift Optional Function Switch Case 練習成果：\n原始碼：\nGitHub - takawang/letter-song\n歌詞：\n今晚 我想將那天的螢火 送到你的窗前 含意是\u0026#34;我愛你\u0026#34; 我想起我們的初吻 不管何時 只要閉上雙眼 就能奔向那最遙遠的地方 就像我在被浪濤湧來的沙上寫下的字跡般 你感覺也會像他們那樣從此消失 總是想念 雖然無法將我心裡所有的話語，說給你聽 但那裡頭，全都是\u0026#34;我愛你\u0026#34; 我何德何能 能擁有名為你的這份幸運 若我們現在能望著對方 該有多美好 就像我在被浪濤湧來的沙上寫下的字跡般 你感覺也會像他們那樣從此消失 還是想念 雖然無法將我寫在日記上的一字一句 都告訴你 但字字句句都代表著我愛你 今晚 我想將那天的螢火 送到你的窗前 希望今夜的你有個美好的夢 影片來源：https://www.youtube.com/watch?v=BzYnNdJhZQw\n歌詞來源：https://tinyurl.com/2p9c5d8a\nStoryboard:\n過程：\n本次結合幾個項目，練習 SDK 使用與熟悉 Swift 語法，只用 function print 無法滿足自己的期待，所以上網查了一些資料並搭配上課內容製作，將 AVPlayerViewController 加進 UIView 應該是最困難的部分，原本考慮使用 Container View 去做，但還不知道怎麼控制多個 Controller，並且跟 Storyboard 串接起來。\n主要在 iPad Pro 12.9 與 iPad Mini 6 實機測試過，iPhone 版面會看不到歌詞。\n新增 UIView，取得 IBOutlet -\u0026gt; Line 12 將 AVPlayerViewController 加進 UIView -\u0026gt; Line 50 用 IBAction 控制 影片播放並開始計時 -\u0026gt; Line59 註冊 View 生命週期與影片播放結束的通知 -\u0026gt; Line 20~28 Partial script import AVFoundation import AVKit import UIKit class ViewController: UIViewController { @IBOutlet weak var lyricsLabel: UILabel! @IBOutlet weak var videoView: UIView! var player: AVPlayer? var timer: Timer? var counter = 0.0 var isPlaying = false override func viewDidLoad() { super.viewDidLoad() // listen to active and resign notifications // ref: https://stackoverflow.com/a/45955660 NotificationCenter.default.addObserver(self, selector: #selector(self.openAndCloseActivity), name: UIApplication.didBecomeActiveNotification, object: nil) NotificationCenter.default.addObserver(self, selector: #selector(self.openAndCloseActivity), name: UIApplication.willResignActiveNotification, object: nil) // listen to end play notification // ref: https://www.tutorialspoint.com/how-to-use-swift-to-detect-when-avplayer-video-ends-playing NotificationCenter.default.addObserver(self, selector: #selector(self.videoDidEnd), name: NSNotification.Name.AVPlayerItemDidPlayToEndTime, object: nil) // setup avplayer controller initVideoView() } // setup avplayer controller // // add avplayer controller to the current view and hide playback controls private func initVideoView() { // ref: https://medium.com/@nabilsafatli/how-to-create-a-custom-control-for-avplayer-1e53b9188ae3 guard let url = Bundle.main.url(forResource: \u0026#34;night\u0026#34;, withExtension: \u0026#34;mp4\u0026#34;) else { return } self.player = AVPlayer(url: url) //player!.rate = 1 //auto play let playerFrame = CGRect(x: 0, y: 0, width: videoView.frame.width, height: videoView.frame.height) let playerViewController = AVPlayerViewController() playerViewController.player = self.player playerViewController.view.frame = playerFrame addChild(playerViewController) // add player controller to view controller videoView.addSubview(playerViewController.view) playerViewController.didMove(toParent: self) playerViewController.showsPlaybackControls = false // hide playback controls } // handle play click event @IBAction func playVideo(_ sender: UIButton) { if !self.isPlaying { self.isPlaying = true // set flag self.counter = 0.0 // init counter self.player?.seek(to: CMTime(value: CMTimeValue(0.0), timescale: 1000)) // seek to head // init timer. // ref: https://medium.com/彼得潘的-swift-ios-app-開發教室/透過-timer-設定每幾秒重複執行-function-3c80f449107 self.timer = Timer.scheduledTimer( timeInterval: 0.1, target: self, selector: #selector(updateLyrics), userInfo: nil, repeats: true) // play video self.player?.play() } else { print(\u0026#34;already playing, do nothing...\u0026#34;) } } @objc func updateLyrics() { self.counter += 0.1 // increase counter switch self.counter { case 5.0...20.0: self.lyricsLabel.text = \u0026#34;IU - 夜信\u0026#34; // 0 case 24.4...37.4: self.lyricsLabel.text = \u0026#34;今晚 我想將那天的螢火\u0026#34; // 1 case 37.5...47.0: self.lyricsLabel.text = \u0026#34;送到你的窗前\u0026#34; // 2 case 49.6...59.0: self.lyricsLabel.text = \u0026#34;含意是 \\\u0026#34;我愛你\\\u0026#34;\u0026#34; // 3 case 68.8...80.8: self.lyricsLabel.text = \u0026#34;我想起我們的初吻\u0026#34; // 4 case 80.9...90.0: self.lyricsLabel.text = \u0026#34;不管何時 只要閉上雙眼\u0026#34; // 5 case 93.1...103.2: self.lyricsLabel.text = \u0026#34;就能奔向那最遙遠的地方\u0026#34; // 6 case 105.7...115.8: self.lyricsLabel.text = \u0026#34;就像我在被浪濤湧來的沙上寫下的字跡般\u0026#34; // 7,8 case 115.9...123.4: self.lyricsLabel.text = \u0026#34;你感覺也會像他們那樣從此消失\u0026#34; // 9 case 123.5...127.4: self.lyricsLabel.text = \u0026#34;總是想念\u0026#34; // 10 case 127.5...141.0: self.lyricsLabel.text = \u0026#34;雖然無法將我心裡所有的話語 說給你聽\u0026#34; // 11,12 case 141.2...151.3: self.lyricsLabel.text = \u0026#34;但那裡頭全都是 \\\u0026#34;我愛你\\\u0026#34;\u0026#34; // 13 case 160.1...166.0: self.lyricsLabel.text = \u0026#34;我何德何能\u0026#34; // 14 case 166.1...171.7: self.lyricsLabel.text = \u0026#34;能擁有名為你的這份幸運\u0026#34; // 15 case 171.8...176.8: self.lyricsLabel.text = \u0026#34;若我們現在能望著對方\u0026#34; // 16 case 176.9...184.0: self.lyricsLabel.text = \u0026#34;該有多美好\u0026#34; // 17 case 184.1...194.1: self.lyricsLabel.text = \u0026#34;就像我在被浪濤湧來的沙上寫下的字跡般\u0026#34; // 18,19 case 194.2...202.5: self.lyricsLabel.text = \u0026#34;你感覺也會像他們那樣從此消失\u0026#34; // 20 case 202.6...205.8: self.lyricsLabel.text = \u0026#34;還是想念\u0026#34; // 21 case 205.9...212.1: self.lyricsLabel.text = \u0026#34;雖然無法將我寫在日記上的一字一句\u0026#34; // 22 case 212.2...220.5: self.lyricsLabel.text = \u0026#34;都告訴你\u0026#34; // 23 case 220.6...226.4: self.lyricsLabel.text = \u0026#34;但字字句句都代表著我愛你\u0026#34; // 24 case 228.5...241.9: self.lyricsLabel.text = \u0026#34;今晚 我想將那天的螢火\u0026#34; // 25 case 242.0...249.7: self.lyricsLabel.text = \u0026#34;送到你的窗前\u0026#34; // 26 case 255.9...267.2: self.lyricsLabel.text = \u0026#34;希望今夜的你有個美好的夢\u0026#34; // 27 default: self.lyricsLabel.text = \u0026#34;\u0026#34; } } // handle vidie end notification // ref: https://www.tutorialspoint.com/how-to-use-swift-to-detect-when-avplayer-video-ends-playing @objc func videoDidEnd(notification: NSNotification) { print(\u0026#34;video ended\u0026#34;) self.timer?.invalidate() // stop timer self.isPlaying = false self.lyricsLabel.text = \u0026#34;\u0026#34; } // handle activity resume and close // ref: https://stackoverflow.com/a/45955660 @objc func openAndCloseActivity(_ notification: Notification) { if notification.name == UIApplication.didBecomeActiveNotification{ print(\u0026#34;resume activity\u0026#34;) // seek to head self.player?.seek(to: CMTime(value: CMTimeValue(0.0), timescale: 1000)) // ref: https://stackoverflow.com/a/59839041 } else{ print(\u0026#34;close activity\u0026#34;) self.player?.pause() // pause player self.timer?.invalidate() // stop timer self.isPlaying = false self.lyricsLabel.text = \u0026#34;\u0026#34; } } } 免責聲明：\n影片使用只為了學習目的，沒有營利行為，版權屬於原創作方 1theK.\n","permalink":"https://blog2.cmwang.net/zh/posts/2022/03/practice-avplayer-view-controller/","summary":"練習使用 AVPlayerViewController 製作動態字幕影片","title":"iPad上的影片播放器"},{"content":"學習目標：\n練習 Scroll View 練習 Navigation Controller 練習 Table View Controller \u0026amp; Static Cells 練習 Label \u0026amp; Button 樣式 練習 segue \u0026amp; SF Symbols 練習成果：\nGitHub - takawang/fake-music\n過程：\n透過直接擷取 iPad Pro 12.9 實機畫面，在 story board 上仿製 Apple Music 上的 IU 專輯頁面，更進一步熟悉了 Navigation Controller 的使用，因為還不會製作符合各種機型的版面，所以就直接 hardcode 只支援 12.9 水平的版面，是有點呆版但也收穫不少。\n限定只支援 iPad 與 Landscape\n修改 Product Name 改變 APP 在桌面的名稱\n需要注意的地方是，在 story board 上的是 point，但螢幕截圖是 pixel，因為沒有 zeplin 之類的設計稿，所以花最多時間還是在抓取與對齊座標，位置不是 pixel perfect，但練習的目的應該是達到了。\nPoint 與 pixel 是 2x scale 的關係\n最近播放的點選，參考下面文章，原本使用 tap gesture recognizer，不過大概因為我將 navigation controller 放錯地方，總是看不到 back 選單，最後選擇透明按鈕疊在上方的做法。\n利用 segue 實現圖片點選的換頁功能\nNavigation Controller 需要從第一個畫面長出來，而不是第二頁\n主畫面有兩個 scoll view，參考連結提供的技巧就可以方便製作，記得將水平與垂直的捲軸指示關閉，這樣畫面會比較擬真。\n設定 content size，實現水平捲動，上下捲動和分頁的 scroll view\n取消勾選水平與垂直 indicator，使得 scroll view 捲動時不會顯示卷軸\nTable View 的第一個 Cell 與最後兩個 Cell 為了版面調整，中間的歌曲列表只需要透過修改 row 數就可以複製，再修改封面照與 label 即可。\n","permalink":"https://blog2.cmwang.net/zh/posts/2022/03/replicate-apple-music-ipad-os-app/","summary":"練習使用 Scroll View \u0026amp; Table View 仿製 iPad 上的 Apple Music App","title":"仿製 iPad 上的 Apple Music"},{"content":"Variables let name; // undefined let name = \u0026lsquo;Jamie\u0026rsquo;; 盡量一行一個變數宣告，這是 best practice Constant const interestRate = 0.2; 如果不會改變，盡量用 const 而不是 let Primitives/Value types number string boolean symbol undefined null let name = \u0026#34;jamie\u0026#34;; // string let age = 30; // number let isApproved = false; // boolean let firstName = undefined; // undefined let lastName = null; // clear a variable typeof age; // \u0026#34;number\u0026#34; typeof firstName; // \u0026#34;undefined\u0026#34;. undefined 既是 type 也是 value typeof lastName; // \u0026#34;object\u0026#34; Reference types object array function // --- object let person = { // object name: \u0026#34;jamei\u0026#34;, // property age: 30, }; person.name = \u0026#34;john\u0026#34;; // dot notation person[\u0026#34;age\u0026#34;] = 20; // bracket notation let selection = \u0026#34;name\u0026#34;; person[selection] = \u0026#34;Jenny\u0026#34;; //--- array is also a \u0026#39;object\u0026#39; type 💡 let selectedColors = [\u0026#34;red\u0026#34;, \u0026#34;blue\u0026#34;]; // array selectedColors[2] = \u0026#34;green\u0026#34;; // length is dynamic console.log(selectedColors[0]); console.log(selectedColors.length); Functions // 1. performing a task function greet(name, lastName) { // name is the parameter console.log(\u0026#34;hello world \u0026#34; + name + \u0026#34; \u0026#34; + lastName); } greet(\u0026#34;jamie\u0026#34;); // jamie is the argument, actual value is applied // 2. calculating a value function square(number) { return number * number; } let number = square(2); Operators arithmetic assignment comparison equality (strict \u0026amp; lose equality) ternary operator (? a : b) logical operator (\u0026amp;\u0026amp;, ||, !) 以下在 logical operator，會自動轉為 Falsy (false) undefined null 0 false '' NaN bit operator(|, \u0026amp;) // arithmetic operator console.log(x % 2); // remainder console.log(x ** y); // exp console.log(++x); // increment (++) console.log(y--); // decrement (--) // assignment operator let x = 10; x++; // x = x + 1 x += 5; // x = x + 5 x *= 3; // x = x * 3 // comparison operator let x = 1; console.log(x \u0026gt; 0); // true // equality console.log(x === 1); console.log(x !== 1); // strict equality (same type + value) console.log(1 === 1); // true console.log(\u0026#34;1\u0026#34; === 1); // false // lose equality (don\u0026#39;t care type, automatically convert type) console.log(1 == \u0026#34;1\u0026#34;); // true console.log(true == 1); // true // ternary operator let poins = 110; let type = points \u0026gt; 100 ? \u0026#34;gold\u0026#34; : \u0026#34;silver\u0026#34;; // logical console.log(true \u0026amp;\u0026amp; true); // logical AND (\u0026amp;\u0026amp;) let highIncome = true; let goodCreditScore = true; let eligibleForLoan = highIncome \u0026amp;\u0026amp; goodCreditScore; // true let eligibleForLoan = highIncome || goodCreditScore; // logical OR (||) let applicationRefused = !eligibleForLoan; // Not (!) // automatically convert operand -\u0026gt; false || \u0026#34;jamie\u0026#34;; // \u0026#39;jamie\u0026#39; false || 1; // 1 // 以下在 logical operator，會自動轉為 Falsy (false) // undefined // null // 0 // false // \u0026#39;\u0026#39; // NaN // short-circult let userColor = \u0026#34;red\u0026#34;; let defaultColor = \u0026#34;blue\u0026#34;; let currentColor = userColor || defaultColor; // can provide default value if user not select // bit operator application // Read, Write, Execute // 00000100 // 00000010 // 00000001 const readPermission = 4; const writePermission = 2; const executePremission = 1; let myPermission = 0; myPermission = myPermission | readPermission | writePermission | executePermission; let message = myPermission \u0026amp; readPermission ? \u0026#34;yes\u0026#34; : \u0026#34;no\u0026#34;; // 可以用來判斷有無權限 Conditional statements if else if (condition) { // statement } else if (anotherCondition) { // statement } else { // statement } switch case // switch case (can be string, number or boolean) let role; switch (role) { case \u0026#34;guest\u0026#34;: console.log(\u0026#34;Guest User\u0026#34;); break; // need case \u0026#34;moderator\u0026#34;: console.log(\u0026#34;Moderator User\u0026#34;); break; default: console.log(\u0026#34;Unknow Role\u0026#34;); } Flow control For loop\nfor (let i = 0; i \u0026lt; 5; i++) { console.log(\u0026#34;hello world\u0026#34;); } While Loop\nlet i = 0; while (i \u0026lt; 5) { if (i % 2 !== 0) console.log(i); i++; } Do-while Loop: execute at least once\nlet i = 0; do { if (i % 2 !== 0) console.log(i); i++; } while (i \u0026lt;= 5); For-in Loop: 用在 property\nconst person = { name = \u0026#39;jamie\u0026#39;, age: 30 }; for (let key in person) { console.log(key, person[key]); } const colors = [\u0026#39;red\u0026#39;, \u0026#39;blue\u0026#39;, \u0026#39;green\u0026#39;]; for (let inex in colors) console.log(index, colors[index]); For-of Loop: 用在 array\nconst colors = [\u0026#34;red\u0026#34;, \u0026#34;blue\u0026#34;, \u0026#34;green\u0026#34;]; for (let color of colors) console.log(color); break and continue\nlet i = 0; while (i \u0026lt;= 10) { if (i == 5) break; if (i % 2 === 0) { i++; continue; // 盡量不要用 } conosle.log(i); i++; } exercise\nfunction max(a, b) return (a \u0026gt; b) ? a : b; function isLandscape(width, height) { return (width \u0026gt; height); } // Math.floor(1.3) // 12 points suspend function checkSpeed(speed) { const speedLimit = 70; const kmPerPoint = 5; if (speed \u0026lt; speedLimit + kmPerPoint) { console.log(\u0026#34;ok\u0026#34;); } else { const points = Math.floor((speed - speedLimit) / knPerPoint); if (points \u0026gt;= 12 ) console.log(\u0026#34;suspend\u0026#34;); else console.log(\u0026#39;points: \u0026#39;, points); } } const array = [0, null, undefined, \u0026#39;\u0026#39;, 2, 3]; function countTruthy(array) { let count = 0; for (let element of array) { if (element) count++; } return count; } const movie = { title: \u0026#39;a\u0026#39;, release: 2018, director: \u0026#39;b\u0026#39; }; function showProperties(obj) { for (let attr in obj) if (Typeof obj[attr] === \u0026#39;string\u0026#39;) console.log(attr, obj[attr]); } showProperties(movie); function showStars(row) { for (let i = 1; i \u0026lt;= row; i++) { let output = \u0026#39;\u0026#39;; for (let j = 0; j \u0026lt; i; j++) output += \u0026#39;*\u0026#39;; console.log(output); } } showStars(5); function showPrimes(limit) { for (let i = 2; i \u0026lt;= limit; i++) { let isPrime = true; for (let f = 2; f \u0026lt; limit; f++) { if ((i % f) === 0) { isPrime = false; break; } } if (isPrime) console.log(i); } } showPrimes(20); Object object literal // object literal const circle = { radius: 1, location: { x: 1, y: 1, }, isVisible: true, draw: function () { console.log(\u0026#34;draw\u0026#34;); }, }; circle.draw(); factory function function createCircle(radius) { return { radius: radius, draw: function () { console.log(\u0026#34;draw\u0026#34;); }, }; } // modern function createCircle(radius) { return { radius, draw() { console.log(\u0026#34;draw\u0026#34;); }, }; } const circle1 = createCircle(1); console.log(circle1); constructor function // PASCAL notion function Circle(radius) { this.radius = radius; this.draw = function () { console.log(\u0026#34;draw\u0026#34;); }; } const circle = new Circle(1); delete circle.color; delete circle.draw; primitives are copied by their value, objects are copied by their reference.\nenumerate properties const circle = { radius: 1, draw() { console.log(\u0026#34;draw\u0026#34;); }, }; for (let key in circle) { console.log(key); } // 🔥 circle is not iterable!!! ERROR for (let prop of circle) { // WRONG!! console.log(prop); } for (let key of Object.keys(circle)) console.log(key); for (let entry of Object.entries(circle)) console.log(entry); if (\u0026#34;radius\u0026#34; in circle) console.log(\u0026#34;yes\u0026#34;); Clone Object (Shallow Copy) const circle = { radius: 1, draw() { console.log(\u0026#34;draw\u0026#34;); }, }; // old clone syntax const another = {}; for (let key in circle) another[key] = circle[key]; // new clone syntax const another = Object.assign({}, circle); // spread operator to shallow copy 🔥 const another = { ...circle }; Math (MDN) Math.random(); // 0~1 Math.round(1.9); // 2 Math.max(1, 2, 3, 4, 5); // 5 String object // string primitive const message = \u0026#34;this is my first string\u0026#34;; // typeof string message.split(\u0026#34; \u0026#34;); // string object const another = new String(\u0026#34;hi\u0026#34;); // typeof object template literal const another = `Hi ${name}, ${2 + 3}, Thank you`; date const now = new Date(); const date1 = new Date(\u0026#34;May 11 2018 09:00\u0026#34;); now.toISOString(); Array add element const numbers = [3, 4]; // End numbers.push(5, 6); console.log(numbers); // 3,4,5,6 // beginning numbers.unshift(1, 2); // 1,2,3,4 // middle numbers.splice(2, 0, \u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;); find element (primitive) const numbers = [1, 2, 3, 1, 4]; numbers.indexOf(\u0026#34;a\u0026#34;); // -1 not found! numbers.indexOf(1); // 0 numbers.lastIndexOf(1); // 3 console.log(numbers.indexOf(1) !== -1); console.log(numbers.includes(1)); // new syntax 🔥 find element (object) const courses = [ { id: 1, name: \u0026#34;a\u0026#34; }, { id: 2, name: \u0026#34;b\u0026#34; }, ]; const course = courses.find(function (course) { return course.name === \u0026#34;a\u0026#34;; // criteria }); console.log(course); const course2 = courses.findIndex(function (course) { return course.name === \u0026#34;a\u0026#34;; // 0 }); console.log(course2); arrow function 當你要傳一個 function 進去當作 callback 時 const courses = [ { id: 1, name: \u0026#34;a\u0026#34; }, { id: 2, name: \u0026#34;b\u0026#34; }, ]; const course = courses.find(function (course) { return course.name === \u0026#34;a\u0026#34;; }); // 只有一行 return 時 const course2 = courses.find((course) =\u0026gt; course.name == \u0026#34;a\u0026#34;); console.log(course2); remove elements const numbers = [1, 2, 3, 4]; // end // numbers.push(); const last = numbers.pop(); console.log(last); // 4 // beginning //numbers.unshift(); const first = numbers.shift(); console.log(first); // 1 // middle numbers.splice(2, 1); console.log(numbers); // 1, 2, 4 empty array const numbers = [1, 2, 3, 4]; let another = numbers; // solution 1 💡 numbers = []; console.log(numbers); // solution 2 💡 numbers.length = 0; // solution 3 numbers.splice(0, numbers.length); // solution 4 while (numbers.length \u0026gt; 0) numbers.pop(); combine \u0026amp; slice const first = [1, 2, 3]; const second = [4, 5, 6]; const combined = first.concat(second); // [1,2,3,4,5,6] const slice = combined.slice(2, 4); // [3,4] const slice = combined.slice(2); // [3,4,5,6] const slice = combined.slice(); // [1,2,3,4,5,6] spread operator (ES6)🔥 const combined = [...first, ...second]; const combined = [...first, \u0026#34;a\u0026#34;, ...second, \u0026#34;b\u0026#34;]; // [1,2,3,\u0026#39;a\u0026#39;,4,5,6,\u0026#39;b\u0026#39;] const copy = [...combined]; // copy iterate array const numbers = [1, 2, 3]; for (let number of numbers) console.log(number); numbers.forEach(function (number) { console.log(number); }); numbers.forEach((number) =\u0026gt; console.log(number)); // arrow version numbers.forEach((number, index) =\u0026gt; console.log(index, number)); // also index 🔥 join array, split string const numbers = [1, 2, 3]; const joined = numbers.join(\u0026#34;,\u0026#34;); // \u0026#39;1,2,3\u0026#39; const message = \u0026#34;This is my first message\u0026#34;; const parts = message.split(\u0026#34; \u0026#34;); // [\u0026#39;This\u0026#39;, \u0026#39;is\u0026#39;, ..]; sort array const numbers = [2, 3, 1]; numbers.sort(); // [1,2,3] numbers.reverse(); // [3,2,1] const Courses = [ { id: 1, name: \u0026#34;Node.js\u0026#34; }, { id: 2, name: \u0026#34;JavaScript\u0026#34; }, ]; Courses.sort(function (a, b) { // a \u0026lt; b =\u0026gt; -1 // a \u0026gt; b =\u0026gt; 1 // a == b =\u0026gt; 0 const nameA = a.name.toUpperCase(); const nameB = b.name.toUpperCase(); if (nameA \u0026lt; nameB) return -1; if (nameA \u0026gt; nameB) return 1; return 0; }); testing elements every() some() const numbers = [1, 2, 3]; // 只要一個失敗，就回傳 false const allPositive = numbers.every(function (value) { return value \u0026gt;= 0; }); // 只要有一個成立就回傳 true const atLeastOnePositive = number.some(function (value) { return value \u0026gt;= 0; }); Filter array const number = [1, -1, 2, 3]; const filtered = numbers.filter(function (value) { // [1,2,3] return value \u0026gt;= 0; }); const filtered = numbers.filter((n) =\u0026gt; n \u0026gt;= 0); // arrow mappin array map 跟 filter return array, 可以 chain const number = [1, -1, 2, 3]; const filtered = numbers.filter((n) =\u0026gt; n \u0026gt;= 0); const items = filtered.map((n) =\u0026gt; \u0026#34;\u0026lt;li\u0026gt;\u0026#34; + n + \u0026#34;\u0026lt;/li\u0026gt;\u0026#34;); console.log(items); const html = \u0026#34;\u0026lt;ul\u0026gt;\u0026#34; + items.join(\u0026#34;\u0026#34;) + \u0026#34;\u0026lt;/ul\u0026gt;\u0026#34;; const items = filtered.map((n) =\u0026gt; { const obj = { value: n }; return obj; }); const items = filtered.map((n) =\u0026gt; ({ value: n })); // 這邊用 () 將 obj 包起來，不然會出錯 reduce array const numbers = [1, -1, 2, 3]; let sum = 0; for (let n of numbers) sum += n; console.log(sum); // alternative const sum = numbers.reduce((accumulator, currentValue) =\u0026gt; { return accumulator + currentValue; }, 0); // arrow const sum = numbers.reduct( (accumulator, currentValue) =\u0026gt; accumulator + currentValue ); ","permalink":"https://blog2.cmwang.net/zh/posts/2020/11/javascript-note-1/","summary":"Javascript Notes","title":"Javascript Notes"},{"content":"Create Model 會自動產生 primary key，因為繼承自 models.Model。若想要自訂 primary key，可以參考 sku 的寫法 # playground/models.py from django.db import models # Create your models here. class Product(models.Model): #sku = models.CharField(max_length=10, primary_key=True) # use this primary key title = models.CharField(max_length=300) description = models.TextField() price = models.DecimalField(max_digits=6, decimal_places=2) inventory = models.IntegerField() last_updated = models.DateTimeField(auto_now=True) # update every time Choices field class Customer(models.Model): # best practice to prevent hardcode MEMBERSHIP_BRONZE = \u0026#39;B\u0026#39; MEMBERSHIP_SILVER = \u0026#39;S\u0026#39; MEMBERSHIP_GOLD = \u0026#39;G\u0026#39; MEMBERSHIP_CHOICES = [ (MEMBERSHIP_BRONZE, \u0026#39;Bronze\u0026#39;), (MEMBERSHIP_SILVER, \u0026#39;Silver\u0026#39;), (MEMBERSHIP_GOLD, \u0026#39;Gold\u0026#39;), ] first_name = models.CharField(max_length=100) last_name = models.CharField(max_length=100) email = models.EmailField(max_length=100,unique=True) phone = models.CharField(max_length=15, unique=True) birth_date = models.DateTimeField(null=True, blank=True) membership = models.CharField(max_length=1, choices=MEMBERSHIP_CHOICES, default=MEMBERSHIP_BRONZE) One-to-One relationship class Address(models.Model): street = models.CharField(max_length=255) city = models.CharField(max_length=255) # address is the child, customer is the parent customr = models.OneToOneField( Customer, on_delete=models.CASCADE, primary_key=True) on_delete=models.CASCADE (層級刪除): 當父模型被刪除時，與之相關聯的子模型也會被刪除 on_delete=models.PROTECT (保護模式): 防止刪除父模型，除非先刪除所有與之相關的子模型。 on_delete=models.SET_NULL (設為空值): 當父模型被刪除時，與之相關聯的子模型的外鍵欄位（即OneToOneField）會被設為 NULL。 範例：一個簡單的部落格系統，如果一篇文章被作者刪除，該文章的作者欄位會被設為 NULL。 on_delete=models.SET_DEFAULT (設為預設值): 當父模型被刪除時，與之相關聯的子模型的外鍵欄位會被設為預設值。 範例：一個簡單的部落格系統，如果一篇文章被作者刪除，該文章的作者欄位會被設為 NULL。 on_delete=models.SET() (設定為特定值): 當父模型被刪除時，與之相關聯的子模型的外鍵欄位會被設為特定的值（通常是另一個存在的模型實例）。 範例：一個論壇系統，如果一個用戶帳號被刪除，與之相關聯的文章的作者欄位會被設為論壇的預設用戶，這個預設用戶的 ID 為 1。 class Child(models.Model): parent = models.OneToOneField(Parent, on_delete=models.CASCADE) ... class Child(models.Model): parent = models.OneToOneField(Parent, on_delete=models.PROTECT) ... class Child(models.Model): parent = models.OneToOneField(Parent, on_delete=models.SET_NULL, null=True) ... class Child(models.Model): parent = models.OneToOneField(Parent, on_delete=models.SET_DEFAULT, default=1) ... class Child(models.Model): parent = models.OneToOneField(Parent, on_delete=models.SET(DefaultParent.objects.get(pk=1))) ... One-to-many relationship one collection can have many products\nUse foreignkey\nif you can not modify the order of declaration for the collection model, you can employ a string argument within the ForeignKey field:\ncollection = models.ForeignKey('Collection', on_delete=models.PROTECT)\nclass Collection(models.Model): title = models.CharField(max_length=300) class Product(models.Model): ... collection = models.ForeignKey(Collection, on_delete=models.PROTECT) Many-to-Many relationship Use ManyToManyField to customize the name of the reverse relation. Instead of the default product_set, you can use the related_name field class Promotion(models.Model): description = models.CharField(max_length=255) discount = models.FloatField() # product_set class Product(models.Model): ... collection = models.ForeignKey(\u0026#39;Collection\u0026#39;, on_delete=models.PROTECT) #promotions = models.ManyToManyField(Promotion, related_name=\u0026#39;products\u0026#39;) promotions = models.ManyToManyField(Promotion) Generic Relationship from django.contrib.contenttypes.models import ContentType from django.contrib.contenttypes.fields import GenericForeignKey from django.contrib.auth.models import User class LikeItem(models.Model): user = models.ForeignKey(User, on_delete=models.CASCADE) # type (Table) content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE) # ID (record) object_id = models.PositiveSmallIntegerField() # Pointer content_object = GenericForeignKey() ContentType (內容類型): 在 Django 中，ContentType 是一個模型，它用來表示其他模型的類型。在這個程式碼中，content_type 欄位是一個外鍵，關聯到 ContentType 模型。這麼做的好處是，它允許你動態地參照其他模型，而不是在程式碼中直接寫死模型的名稱。這樣的設計可以增加彈性，讓你的程式碼更容易擴展和修改，而不需要改動太多程式碼。\nGenericForeignKey (通用外鍵): GenericForeignKey 是一個用於關聯任意模型的特殊欄位。在這個例子中，content_object 欄位使用了 GenericForeignKey。這意味著 LikeItem 模型可以與任何其他模型建立關聯，而不僅僅是固定的一個或幾個模型。通過 content_type 和 object_id 這兩個欄位，你可以動態地建立與不同模型的關聯。\nLikeItem 模型: LikeItem 是一個用戶點贊的模型，它關聯到了使用者 (user) 和其他模型 (content_type 和 object_id 確定的模型)。這樣的設計允許你在不確定具體模型的情況下，保存用戶對不同類型物件的喜愛。\n在 LikeItem 模型中，content_type 是一個外鍵欄位，關聯到 ContentType 模型，用來指定被點贊物件的類型（例如，是一篇文章還是一張圖片等等）。而 object_id 是一個正整數欄位，用來指定具體的被點贊物件的 ID。\nGenericForeignKey 的作用就是把 content_type 和 object_id 這兩個欄位關聯到一個具體的模型實例上，這樣你就可以在 LikeItem 中使用 content_object 這個屬性，直接訪問被點贊的具體物件，而不需要關心它是哪種模型。\n例如，如果 content_type 指定為文章，object_id 指定為某篇文章的 ID，那麼 content_object 就可以直接訪問該篇文章的所有屬性和方法。這樣，你可以在不確定具體模型的情況下，動態地建立關聯，使得程式碼更加靈活和可擴展。\n你可以將 content_object 想像成程式語言中的指標 pointer。在這個上下文中，content_object 實際上是一個通用指標，指向了應用中的任何一個模型的特定實例。這樣的設計使得你可以動態地指向和訪問不同模型的物件，而不需要知道具體是哪個類型的物件。\n就像指標在程式語言中可以指向不同的變數或數據結構，content_object 允許你在 LikeItem 模型中指向任何類型的物件，從而實現彈性的資料模型。這樣的抽象設計使得程式碼更具通用性，可以應對多種不同的情況，同時也使得程式碼更容易擴展和維護。\nGeneric Relationship - Example 假設你的對象是 Article（文章）模型，你可以使用 GenericForeignKey 來建立 LikeItem 與 Article 之間的關聯。以下是一個簡單的範例：\n首先，定義你的 Article 模型：\nfrom django.db import models class Article(models.Model): # 文章的屬性，例如標題、內容等等 title = models.CharField(max_length=100) content = models.TextField() def __str__(self): return self.title 然後，定義你的 LikeItem 模型，使用 GenericForeignKey 來建立通用外鍵關聯：\nfrom django.contrib.contenttypes.fields import GenericForeignKey from django.contrib.contenttypes.models import ContentType from django.contrib.auth.models import User from django.db import models class LikeItem(models.Model): user = models.ForeignKey(User, on_delete=models.CASCADE) content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE) object_id = models.PositiveIntegerField() content_object = GenericForeignKey(\u0026#39;content_type\u0026#39;, \u0026#39;object_id\u0026#39;) 在這個例子中，LikeItem 模型可以關聯到任何模型的實例，包括 Article。當你想要為某篇文章建立一個 LikeItem 時，你可以這樣做：\n# 創建一篇文章 article = Article.objects.create(title=\u0026#34;標題\u0026#34;, content=\u0026#34;文章內容\u0026#34;) # 創建一個 LikeItem 關聯到這篇文章 like_item = LikeItem.objects.create(user=user, content_type=ContentType.objects.get_for_model(article), object_id=article.id) # 使用 GenericForeignKey 訪問被點贊的物件 liked_article = like_item.content_object print(liked_article.title) # 輸出: 標題 在這個例子中，content_type 指定為 Article 模型的類型，object_id 指定為具體文章的 ID。通過 GenericForeignKey，你可以使用 content_object 直接訪問到被點贊的文章的屬性。這樣，你可以動態地建立與不同模型的關聯，而不需要為每種模型都定義一個單獨的外鍵。\nReverse Relationship - Example 在 Django 中，反向關係(reverse relationship) 通常是自動產生的，無論是在一對一（One-to-One）、一對多（One-to-Many）還是多對多（Many-to-Many）的關係中，Django 都會自動為你建立反向關係。這意味著你可以從一個模型對象訪問與之相關聯的其他模型對象。\n假設你有兩個模型，一個是Author，另一個是Book。Book模型有一個外鍵欄位指向Author模型：\nfrom django.db import models class Author(models.Model): name = models.CharField(max_length=100) class Book(models.Model): title = models.CharField(max_length=100) author = models.ForeignKey(Author, on_delete=models.CASCADE) 在這個例子中，Book模型有一個外鍵欄位author指向Author模型。Django 會自動為Author模型生成一個反向關係。這意味著你可以透過Author模型來訪問所有與之相關聯的書籍，即使你並沒有在Author模型中定義相關的欄位。\n例如，如果你有一個Author的實例author，你可以這樣獲取所有與這個作者相關的書籍：\nbooks = author.book_set.all() 在這裡，book_set就是 Django 自動為Author模型生成的反向關係。這個名稱的格式是小寫的模型名稱_set，它可以讓你訪問到所有與這個模型相關的對象。這種反向關係的自動生成使得在 Django 中進行模型之間的查詢和操作更加方便。\n然而，有一個特殊的情況是如果你已經使用了 related_name 參數來定義了自定義的反向關係名稱，反向關係的名稱就不再是默認的 小寫的模型名稱_set 格式。在這種情況下，你必須通過自定義的名稱來訪問反向關係。\n舉例來說：\nfrom django.db import models class Person(models.Model): name = models.CharField(max_length=100) class Passport(models.Model): number = models.CharField(max_length=20) person = models.OneToOneField(Person, on_delete=models.CASCADE, related_name=\u0026#39;passport\u0026#39;) 在這個例子中，Passport 模型有一個一對一的外鍵關係，並且使用了 related_name='passport' 參數。這樣，在 Person 模型中就不會自動生成默認的反向關係。要訪問這個關係，你需要使用 passport 這個自定義的名稱：\nperson = Person.objects.get(pk=1) passport = person.passport # 訪問一對一關係的反向關係 在其他情況下（包括一對多和多對多關係），Django 都會自動生成默認的反向關係，你可以直接使用模型的名稱（小寫）作為反向關係的名稱。\nrelated_name field in ForeignKey 在一對多關係中，related_name 可以被用來定義反向關係的名稱，使你能夠更具意義地訪問相關對象。在多對多關係中，related_name 可以被用來定義通過中間表訪問相關對象時的名稱。\n以下是一個一對多和多對多關係中 related_name 的使用示例：\n一對多（One-to-Many）關係：\nfrom django.db import models class Author(models.Model): name = models.CharField(max_length=100) class Book(models.Model): title = models.CharField(max_length=100) author = models.ForeignKey(Author, on_delete=models.CASCADE, related_name=\u0026#39;books\u0026#39;) 在這個例子中，Book 模型的 author 欄位定義了外鍵關係，並且使用了 related_name='books' 參數。這樣，你就可以透過 author.books.all() 來訪問一位作者的所有書籍。\n多對多（Many-to-Many）關係：\nfrom django.db import models class Person(models.Model): name = models.CharField(max_length=100) groups = models.ManyToManyField(\u0026#39;Group\u0026#39;, related_name=\u0026#39;memberships\u0026#39;) class Group(models.Model): name = models.CharField(max_length=100) # 其他欄位和方法 在這個例子中，Person 模型和 Group 模型之間建立了多對多的關係。Person 模型的 groups 欄位使用了 related_name='memberships' 參數。這樣，你可以透過 group.memberships.all() 來訪問一個群組中的所有成員。\n","permalink":"https://blog2.cmwang.net/zh/posts/2020/10/django-data-model/","summary":"Django - Data Modelling","title":"Django - Data Modelling"},{"content":"Create Project poetry init portry add django django-admin startproject my_site . # period to current directory python manage.py runserver [9000] # port is optional Every Django project consists of multiple apps. Create APP python manage.py startapp playground ├── manage.py ├── playground │ ├── __init__.py │ ├── admin.py │ ├── apps.py # config setting │ ├── migrations │ │ └── __init__.py │ ├── models.py │ ├── tests.py │ └── views.py\t# request handlers Register APP you can use both methods. # settings.py INSTALLED_APPS = [ # ... \u0026#39;playground\u0026#39;, # ... ] # settings.py INSTALLED_APPS = [ # ... \u0026#39;playground.apps.PlaygroundConfig\u0026#39;, # ... ] Views # playground/views.py from django.shortcuts import render from django.http import HttpResponse def say_hello(request): return HttpResponse(\u0026#39;Hello World\u0026#39;) Maps URLs to Views setup urls.py in the app # playground/urls.py import django.urls import path from . import views # URLConf: need to be this variable name 💡 urlpatterns = [ path(\u0026#39;playground/hello\u0026#39;, views.say_hello) ] include the app\u0026rsquo;s url in the project level # storefront/urls.py from django.contrib import admin from django.urls import path, include # add include urlpatterns = [ path(\u0026#39;admin/\u0026#39;, admin.site.urls), path(\u0026#39;playground/\u0026#39;, include(\u0026#39;playground.urls\u0026#39;)) # add this ] Use Templates create templates folder under playground and create a new file hello.html. \u0026lt;!-- playground/templates/hello.html --\u0026gt; {% if name %} \u0026lt;h1\u0026gt;Hello {{ name }}\u0026lt;/h1\u0026gt; {% else %} \u0026lt;h1\u0026gt;Hello World\u0026lt;/h1\u0026gt; {% endif %} refine the views.py (request handler) # playground/views.py from django.shortcuts import render #from django.http import HttpResponse def say_hello(request): return render(request, \u0026#39;hello.html\u0026#39;, {\u0026#39;name\u0026#39;: \u0026#39;Jamie\u0026#39;}) Debug Tools VSCode: Create a launch.json file -\u0026gt; select django Django Debug Toolbar: follow the instructions 💎 ","permalink":"https://blog2.cmwang.net/zh/posts/2020/10/django-fundamental/","summary":"Django - Fundamental","title":"Django - Fundamental"},{"content":"\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34; /\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;Simple Form\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Contact Us\u0026lt;/h1\u0026gt; \u0026lt;!-- The \u0026#39;action\u0026#39; attribute specifies where the form data will be sent --\u0026gt; \u0026lt;!-- The \u0026#39;method\u0026#39; attribute specifies the HTTP method to be used (GET or POST) --\u0026gt; \u0026lt;form action=\u0026#34;/submit_form\u0026#34; method=\u0026#34;post\u0026#34;\u0026gt; \u0026lt;!-- Text Input --\u0026gt; \u0026lt;label for=\u0026#34;name\u0026#34;\u0026gt;Name:\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; id=\u0026#34;name\u0026#34; name=\u0026#34;user_name\u0026#34; placeholder=\u0026#34;Your name\u0026#34; required /\u0026gt; \u0026lt;br /\u0026gt; \u0026lt;!-- Email Input --\u0026gt; \u0026lt;label for=\u0026#34;email\u0026#34;\u0026gt;Email:\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;email\u0026#34; id=\u0026#34;email\u0026#34; name=\u0026#34;user_email\u0026#34; placeholder=\u0026#34;Your email\u0026#34; required /\u0026gt; \u0026lt;br /\u0026gt; \u0026lt;!-- Password Input --\u0026gt; \u0026lt;label for=\u0026#34;password\u0026#34;\u0026gt;Password:\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;password\u0026#34; id=\u0026#34;password\u0026#34; name=\u0026#34;user_password\u0026#34; required /\u0026gt; \u0026lt;br /\u0026gt; \u0026lt;!-- Radio Buttons --\u0026gt; \u0026lt;p\u0026gt;Preferred Contact Method:\u0026lt;/p\u0026gt; \u0026lt;input type=\u0026#34;radio\u0026#34; id=\u0026#34;contact_email\u0026#34; name=\u0026#34;contact_method\u0026#34; value=\u0026#34;email\u0026#34; checked /\u0026gt; \u0026lt;label for=\u0026#34;contact_email\u0026#34;\u0026gt;Email\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;radio\u0026#34; id=\u0026#34;contact_phone\u0026#34; name=\u0026#34;contact_method\u0026#34; value=\u0026#34;phone\u0026#34; /\u0026gt; \u0026lt;label for=\u0026#34;contact_phone\u0026#34;\u0026gt;Phone\u0026lt;/label\u0026gt; \u0026lt;br /\u0026gt; \u0026lt;!-- Checkbox --\u0026gt; \u0026lt;input type=\u0026#34;checkbox\u0026#34; id=\u0026#34;subscribe\u0026#34; name=\u0026#34;subscribe\u0026#34; checked /\u0026gt; \u0026lt;label for=\u0026#34;subscribe\u0026#34;\u0026gt;Subscribe to our newsletter\u0026lt;/label\u0026gt; \u0026lt;br /\u0026gt; \u0026lt;!-- Textarea for Longer Text --\u0026gt; \u0026lt;label for=\u0026#34;message\u0026#34;\u0026gt;Message:\u0026lt;/label\u0026gt; \u0026lt;textarea id=\u0026#34;message\u0026#34; name=\u0026#34;user_message\u0026#34; rows=\u0026#34;4\u0026#34; cols=\u0026#34;50\u0026#34; placeholder=\u0026#34;Your message\u0026#34; \u0026gt;\u0026lt;/textarea\u0026gt; \u0026lt;br /\u0026gt; \u0026lt;!-- Submit Button --\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Submit\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; \u0026lt;form\u0026gt; element: This is the container for your form. The action attribute specifies the URL where the form data will be sent, and the method attribute specifies the HTTP method (usually \u0026ldquo;GET\u0026rdquo; or \u0026ldquo;POST\u0026rdquo;).\nText Input (\u0026lt;input type=\u0026quot;text\u0026quot;\u0026gt;): Used for single-line text input. The id attribute is a unique identifier, and the name attribute is the key that will be used to identify this field when the form is submitted.\nEmail Input (\u0026lt;input type=\u0026quot;email\u0026quot;\u0026gt;): Similar to text input but specifically designed for email addresses.\nPassword Input (\u0026lt;input type=\u0026quot;password\u0026quot;\u0026gt;): Used for password input. The text is usually masked for security.\nRadio Buttons (\u0026lt;input type=\u0026quot;radio\u0026quot;\u0026gt;): Used when the user must select one option from a group of options. The name attribute groups the radio buttons together.\nCheckbox (\u0026lt;input type=\u0026quot;checkbox\u0026quot;\u0026gt;): Allows the user to select multiple options. The checked attribute makes the checkbox initially selected.\nTextarea (\u0026lt;textarea\u0026gt;): Used for multi-line text input, suitable for longer messages.\nSubmit Button (\u0026lt;input type=\u0026quot;submit\u0026quot;\u0026gt;): Submits the form when clicked.\n","permalink":"https://blog2.cmwang.net/zh/posts/2020/10/html-form-cheat-sheet/","summary":"HTML Form Cheat Sheet","title":"Html Form Cheat Sheet"},{"content":"Document Structure ! 然後 tab 快速鍵，快速產出骨架：\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; .... \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Paragraph element p \u0026lt;p\u0026gt;lorem ...\u0026lt;/p\u0026gt; Heading element h1, h2,\u0026hellip;, h6 只能有一個 H1 \u0026lt;h1\u0026gt;Taka\u0026#39;s Blog\u0026lt;/h1\u0026gt; Comments \u0026lt;!-- something --\u0026gt; Void Element br 與 hr \u0026lt;br /\u0026gt; \u0026lt;!-- 換行 --\u0026gt; \u0026lt;hr /\u0026gt; \u0026lt;!-- 分隔線 --\u0026gt; Lists ul 與 ol Unordered List \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;item 1\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;item 2\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;item 3\u0026lt;/li\u0026gt; \u0026lt;ul\u0026gt;\u0026lt;/ul\u0026gt; \u0026lt;/ul\u0026gt; Ordered List \u0026lt;ol\u0026gt; \u0026lt;ol\u0026gt; item 1 \u0026lt;/ol\u0026gt; \u0026lt;ol\u0026gt; item 2 \u0026lt;/ol\u0026gt; \u0026lt;ol\u0026gt; item 3 \u0026lt;/ol\u0026gt; \u0026lt;ol\u0026gt;\u0026lt;/ol\u0026gt; \u0026lt;/ol\u0026gt; Emphasis em 不要再使用 \u0026lt;i\u0026gt;lorem\u0026lt;/i\u0026gt; \u0026lt;em\u0026gt;lorem\u0026lt;/em\u0026gt; Bold strong \u0026lt;strong\u0026gt;lorem\u0026lt;/strong\u0026gt; Superscript, Subscript sup sub \u0026lt;sup\u0026gt;\u0026lt;/sup\u0026gt; \u0026lt;sub\u0026gt;\u0026lt;/sub\u0026gt; Image image alt 很重要 \u0026lt;img src=\u0026#34;io.png\u0026#34; alt=\u0026#34;something in the folder\u0026#34; /\u0026gt; Anchor (links) a The Anchor element - HTML: HyperText Markup Language | MDN\nlink to other elements，可以用 # link 到某一段落的 id \u0026lt;a href=\u0026#34;...\u0026#34;\u0026gt;go to reddit\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;contact.html\u0026#34;\u0026gt;Contact\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;#pets\u0026#34;\u0026gt;My Pets\u0026lt;/a\u0026gt; \u0026lt;!-- link to section --\u0026gt; \u0026lt;h2 id=\u0026#34;pets\u0026#34;\u0026gt;Pets\u0026lt;/h2\u0026gt; image anchor \u0026lt;a href=\u0026#34;https://example.com\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;[https://picsum.photos/400](https://picsum.photos/400)\u0026#34; alt=\u0026#34;pig\u0026#34; /\u0026gt; \u0026lt;/a\u0026gt; target \u0026lt;a href=\u0026#34;contact.html\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;Contact\u0026lt;/a\u0026gt; Inline vs block elements inline 不會換行 block elements 會佔滿整行，例如 heading elements Forms use form to group controls together name for input，這樣傳遞參數才能區別是哪個 input placeholder for text input required 設為必填 input types: The Input (Form Input) element - HTML: HyperText Markup Language | MDN \u0026lt;form action=\u0026#34;/register\u0026#34; method=\u0026#34;get\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;any\u0026#34; placeholder=\u0026#34;any\u0026#34; /\u0026gt; \u0026lt;!-- text inputs --\u0026gt; \u0026lt;label for=\u0026#34;your_name\u0026#34;\u0026gt;Enter your name\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;name_input\u0026#34; id=\u0026#34;your_name\u0026#34; /\u0026gt; \u0026lt;!-- text inputs --\u0026gt; \u0026lt;button type=\u0026#34;submit\u0026#34;\u0026gt;Submit\u0026lt;/button\u0026gt; \u0026lt;!-- button --\u0026gt; \u0026lt;input type=\u0026#34;password\u0026#34; /\u0026gt; \u0026lt;input type=\u0026#34;email\u0026#34; /\u0026gt; \u0026lt;input type=\u0026#34;number\u0026#34; /\u0026gt; \u0026lt;input type=\u0026#34;color\u0026#34; /\u0026gt; \u0026lt;input type=\u0026#34;checkbox\u0026#34; name=\u0026#34;subscribe\u0026#34; /\u0026gt; \u0026lt;!-- 🔥 --\u0026gt; \u0026lt;input type=\u0026#34;radio\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; range input \u0026lt;input type=\u0026#34;range\u0026#34; min=\u0026#34;0\u0026#34; max=\u0026#34;10\u0026#34; step=\u0026#34;2\u0026#34; name=\u0026#34;volumnvalue\u0026#34; /\u0026gt; text area multiple line text input \u0026lt;textarea rows=\u0026#34;10\u0026#34; cols=\u0026#34;10\u0026#34;\u0026gt;\u0026lt;/textarea\u0026gt; selects \u0026lt;label for=\u0026#34;pet_options\u0026#34;\u0026gt;Select your pet\u0026lt;/label\u0026gt; \u0026lt;select name=\u0026#34;pets\u0026#34; id=\u0026#34;pet_options\u0026#34;\u0026gt; \u0026lt;option value=\u0026#34;dog\u0026#34;\u0026gt;Dog\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;cat\u0026#34;\u0026gt;Cat\u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt; radio button 需要給 value 區分是哪個被選中 若使用同樣的 name ，就可以 group radio button \u0026lt;label for=\u0026#34;phone\u0026#34;\u0026gt;Call me\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;radio\u0026#34; id=\u0026#34;phone\u0026#34; ***name=\u0026#34;contact\u0026#34; *** **value=\u0026#34;phone\u0026#34; ** /\u0026gt; \u0026lt;label for=\u0026#34;email\u0026#34;\u0026gt;Email\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;radio\u0026#34; id=\u0026#34;email\u0026#34; ***name=\u0026#34;contact\u0026#34; *** **value=\u0026#34;email\u0026#34; ** /\u0026gt; Tables \u0026lt;thead\u0026gt; \u0026lt;tbody\u0026gt; \u0026lt;tfoot\u0026gt; \u0026lt;table\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;col_1\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;col_2\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;lorem\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;lorem\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;lorem\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;lorem\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; Span and Divs span use for styling purpose, it does not have any meaning\ndiv generic containers that have no inherent meaning, they are use to group content together for styling.\nSemantic markup / Semantic elements\n使用有語意的標籤而不是一堆 div Semantics - MDN Web Docs Glossary: Definitions of Web-related terms | MDN\n","permalink":"https://blog2.cmwang.net/zh/posts/2020/10/html-cheat-sheet/","summary":"Cheat Sheet for HTML","title":"HTML Cheat Sheet"},{"content":"Comments // one line comment 👈 # another one line comment 👈 /* This is a multiple-lines comment block that spans over multiple lines */ Input \u0026amp; Output echo \u0026#39;Hello World\u0026#39;; // Debug output var_dump($names); print_r($products); // Input from console $name = readline(\u0026#39;What is your name : \u0026#39;); Naming Conventions // PHP opening/closing tag \u0026lt;?php echo \u0026#34;Hello World\u0026#34;; ?\u0026gt; // 🔥 if no closing tag the rest of the file will be considered PHP // Short syntax for PHP echo 💡 \u0026lt;?= \u0026#34;Hello World\u0026#34; ?\u0026gt; //Enable strict typing (first line of your PHP file) \u0026lt;? declare(strict_types=1); // Include a PHP file require \u0026#39;app/Product.php\u0026#39; // Create a namespace namespace App; // Use a namespace use App\\Product; $firstName = \u0026#39;Mike\u0026#39; // camelCase function updateProduct() // camelCase class ProductItem // StudlyCaps const ACCESS_KEY = \u0026#39;123abc\u0026#39;; // all upper case with underscore separators Variables Declaration $name = \u0026#39;Mike\u0026#39;; //string $isActive = true; //boolean $number = 25; //integer $bankBalance = 1_000_000; // readable integer 💡 $amount = 99.95; //float $fruits = [\u0026#39;orange\u0026#39;, \u0026#39;apple\u0026#39;, \u0026#39;banana\u0026#39;] //array const MAX_USERS = 50; //constant define(\u0026#39;MAX_USERS\u0026#39;, 50); //constant // Assign \u0026#39;by reference\u0026#39; with the \u0026amp; keyword $name_2 = \u0026amp;$name_1 // Type conversion 🔥 $age = (int)readline(\u0026#39;Your age: \u0026#39;); echo \u0026#39;Your age is\u0026#39; . (string)$age; echo gettype($age); // int echo is_int($age) // true echo is_float(12.5) // true echo is_string($name) // true Data Types null: case insensitive bool: case insensitive int float string array object callable resource Strings // String can use single quote $name = \u0026#39;Mike\u0026#39; // or double quote $name = \u0026#34;Mike\u0026#34; // Double quote string can escape characters \\n = new line \\t = tab \\\\ = backslash echo \u0026#34;Hello Mike\\nHello David\u0026#34;; // Double quote string can do interpolation 💡 echo \u0026#34;Hello $name\u0026#34;; echo \u0026#34;Hello {$name}™\u0026#34;; // string concat echo \u0026#39;Hello \u0026#39; . $name; // string length echo strlen($name); // Remove space(s) before and after echo trim($text) // Convert to lowercase / uppercase echo strtolower($email); echo strtoupper($name); // Converts the first character to uppercase echo ucfirst($name); // \u0026#39;Mike\u0026#39; // Replace text a by text b in $text echo str_replace(\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, $text); // String Contains (PHP 8) echo str_contains($name, \u0026#39;ke\u0026#39;) # true // Find numeric position of first occurrence $pos = strpos($name, \u0026#39;k\u0026#39;); # 2 // Returns portion of string (offset / length) echo substr($name, 0, $pos); # Mi Numbers // Shortcut addition assignment $value = 10 $value++ // 11 // or $value += 1 // 11 // Shortcut subtraction assignment $value = 10 $value-- // 9 // or $value -= 1 // 9 // Check if numeric echo is_numeric(\u0026#39;59.99\u0026#39;); # true // Round a number echo round(0.80); // returns 1 // Round a number with precision echo round(1.49356, 2)); // returns 1.49 // Random number echo(rand(10, 100)); # 89 Arrays //Array declaration can contain any types $example = [\u0026#39;Mike\u0026#39;, 50.2, true, [\u0026#39;10\u0026#39;, \u0026#39;20\u0026#39;]]; //Array declaration $names = [\u0026#39;Mike\u0026#39;, \u0026#39;Peter\u0026#39;, \u0026#39;Shawn\u0026#39;, \u0026#39;John\u0026#39;]; // Insert $names[] = \u0026#34;Jane\u0026#34;; // 💡 change array length // Direct access to a specific element $name[1] //output Peter // How to access an array in an array $example[3][1] // 20 //add a element to an array $names[] = \u0026#39;Micheal\u0026#39;; // Array merge $array3 = array_merge($array1, $array2); // Merge with spreading operator (also work with associative array) $array3 = [...$array1, ...$array2]; // Array Concat with Spread Operator $names = [\u0026#39;Mike\u0026#39;, \u0026#39;Peter\u0026#39;, \u0026#39;Paul\u0026#39;]; $people = [\u0026#39;John\u0026#39;, ...$names]; // [\u0026#39;John\u0026#39;, \u0026#39;Mike\u0026#39;, \u0026#39;Peter\u0026#39;, \u0026#39;Paul\u0026#39;] //Remove array entry: unset($names[\u0026#39;Peter\u0026#39;]); //Array to string echo implode(\u0026#39;, \u0026#39;, $names) //output Mike, Shawn, John, Micheal // String to Array echo explode(\u0026#39;,\u0026#39;, $text); // [\u0026#39;Mike\u0026#39;, \u0026#39;Shawn\u0026#39;, \u0026#39;John\u0026#39;] //loop for each array entry foreach($names as $name) { echo \u0026#39;Hello \u0026#39; . $name; } // Number of items in a Array echo count($names); //Associative array declaration (key =\u0026gt; value): $person = [\u0026#39;age\u0026#39; =\u0026gt; 45, \u0026#39;genre\u0026#39; =\u0026gt; \u0026#39;men\u0026#39;]; //Add to ass. array: $person[\u0026#39;name\u0026#39;] = \u0026#39;Mike\u0026#39;; //loop ass. array key =\u0026gt; value: foreach($names as $key =\u0026gt; $value) { echo $key . \u0026#39; : \u0026#39; . $value } // Check if a specific key exist echo array_key_exists(\u0026#39;age\u0026#39;, $person); // Return keys echo array_keys($person); // [\u0026#39;age\u0026#39;, \u0026#39;genre\u0026#39;] // Return values echo array_values($person) // [45, \u0026#39;men\u0026#39;] //Array filter (return a filtered array) $filteredPeople = array_filter($people, function ($person) { return $names-\u0026gt;active; }) // Array map (return transform array): $onlyNames = array_map(function($person) { return [\u0026#39;name\u0026#39; =\u0026gt; $person-\u0026gt;name]; }, $people) # Search associative array $items = [ [\u0026#39;id\u0026#39; =\u0026gt; \u0026#39;100\u0026#39;, \u0026#39;name\u0026#39; =\u0026gt; \u0026#39;product 1\u0026#39;], [\u0026#39;id\u0026#39; =\u0026gt; \u0026#39;200\u0026#39;, \u0026#39;name\u0026#39; =\u0026gt; \u0026#39;product 2\u0026#39;], [\u0026#39;id\u0026#39; =\u0026gt; \u0026#39;300\u0026#39;, \u0026#39;name\u0026#39; =\u0026gt; \u0026#39;product 3\u0026#39;], [\u0026#39;id\u0026#39; =\u0026gt; \u0026#39;400\u0026#39;, \u0026#39;name\u0026#39; =\u0026gt; \u0026#39;product 4\u0026#39;], ]; # search all value in the \u0026#39;name\u0026#39; column $found_key = array_search(\u0026#39;product 3\u0026#39;, array_column($items, \u0026#39;name\u0026#39;)); # return 2 Type Casting // Booleans var_dump((bool) \u0026#34;\u0026#34;); // -\u0026gt; false var_dump((bool) \u0026#34;Some Text\u0026#34;); // -\u0026gt; true var_dump((boolean) \u0026#34;0\u0026#34;); // -\u0026gt; false var_dump((bool) \u0026#34;false\u0026#34;); // -\u0026gt; true 💡 var_dump((bool) 0); // -\u0026gt; false var_dump((bool) 1); // -\u0026gt; true var_dump((bool) -1); // -\u0026gt; true 💡 var_dump((bool) null); // -\u0026gt; false var_dump((bool) []); // -\u0026gt; false var_dump((bool) [\u0026#34;hello\u0026#34;]); // -\u0026gt; true // Integers var_dump((int) false); // -\u0026gt; 0 var_dump((integer) true); // -\u0026gt; 1 var_dump((int) \u0026#34;-1\u0026#34;); // -\u0026gt; -1 var_dump((int) \u0026#34;Hello\u0026#34;); // -\u0026gt; 0 💡 var_dump((int) \u0026#34;12 months\u0026#34;); // -\u0026gt; 12 var_dump((int) 12.7); // -\u0026gt; 12 💡 var_dump((int) null); // -\u0026gt; 0 💡 // Float var_dump((float) false); // -\u0026gt; 0 var_dump((float) true); // -\u0026gt; 1 var_dump((float) \u0026#34;-1\u0026#34;); // -\u0026gt; -1 var_dump((float) \u0026#34;Hello\u0026#34;); // -\u0026gt; 0 var_dump((float) \u0026#34;2.5 Hour\u0026#34;); // -\u0026gt; 2.5 var_dump((float) null); // -\u0026gt; 0 // Strings var_dump((string) false); // -\u0026gt; \u0026#34;\u0026#34; 💡 var_dump((string) true); // -\u0026gt; \u0026#34;1\u0026#34; var_dump((string) 0); // -\u0026gt; \u0026#34;0\u0026#34; var_dump((string) 1.353); // -\u0026gt; \u0026#34;1.353\u0026#34; var_dump((string) []); // -\u0026gt; \u0026#34;Array\u0026#34; 💡 var_dump((string) [\u0026#34;John\u0026#34;]); // -\u0026gt; \u0026#34;Array\u0026#34; 💡 var_dump((string) null); // -\u0026gt; \u0026#34;\u0026#34; 💡 // Arrays var_dump((array) false); // -\u0026gt; [false] var_dump((array) true); // -\u0026gt; [true] var_dump((array) 0); // -\u0026gt; [0] var_dump((array) 1.353); // -\u0026gt; [1.353] var_dump((array) \u0026#34;John\u0026#34;); // -\u0026gt; [\u0026#34;John\u0026#34;] var_dump((array) null); // -\u0026gt; [] Conditionals // If / elseif / else if ($condition == 10) { echo \u0026#39;condition 10\u0026#39; } elseif ($condition == 5) { echo \u0026#39;condition 5\u0026#39; } else { echo \u0026#39;all other conditions\u0026#39; } // And condition = \u0026amp;\u0026amp; if ($condition === 10 \u0026amp;\u0026amp; $condition2 === 5) { echo \u0026#39;10 and 5\u0026#39; } // Or condition = || if ($condition === 10 || $condition2 === 5) { echo \u0026#39;10 or 5\u0026#39; } // One line if ($isActive) return true; // Null check if (is_null($name)) { do something... } //Comparaison operation == // equal no type check === // equal with type check != //not equal || //or \u0026amp;\u0026amp; //and \u0026gt; //greater than \u0026lt; //less than // Ternary operator (true : false) echo $isValid ? \u0026#39;user valid\u0026#39; : \u0026#39;user not valid\u0026#39;; //Null Coalesce Operator echo $name ?? \u0026#39;Mike\u0026#39;; //output \u0026#39;Mike\u0026#39; if $name is null //Null Coalesce Assignment $name ??= \u0026#39;Mike\u0026#39;; // Null Safe Operator (PHP 8) will return null if one ? is null echo $user?-\u0026gt;profile?-\u0026gt;activate(); // Null Safe + Null Coalesce (if null will return \u0026#39;No user profile\u0026#39;) echo $user?-\u0026gt;profile?-\u0026gt;activate() ?? \u0026#39;Not applicable\u0026#39;; //Spaceship operator return -1 0 1 $names = [\u0026#39;Mike\u0026#39;, \u0026#39;Paul\u0026#39;, \u0026#39;John\u0026#39;] usort($names, function($a, $b) { return $a \u0026lt;=\u0026gt; $b; } // [\u0026#39;John\u0026#39;, \u0026#39;Mike\u0026#39;, \u0026#39;Paul\u0026#39;] // Return false when convert as boolean false, 0, 0.0, null, unset, \u0026#39;0\u0026#39;, \u0026#39;\u0026#39;, [] // Compare same variable with multiple values switch ($color) { case \u0026#39;red\u0026#39;: echo \u0026#39;The color is red\u0026#39;; break; case \u0026#39;yellow\u0026#39;: echo \u0026#39;The color is yellow\u0026#39;; break; case \u0026#39;blue\u0026#39;: echo \u0026#39;The color is blue\u0026#39;; break; default: echo \u0026#39;The color is unknown\u0026#39;; } // Match Expression (PHP 8) $type = match($color) { \u0026#39;red\u0026#39; =\u0026gt; \u0026#39;danger\u0026#39;, \u0026#39;yellow\u0026#39;, \u0026#39;orange\u0026#39; =\u0026gt; \u0026#39;warning\u0026#39;, \u0026#39;green\u0026#39; =\u0026gt; \u0026#39;success\u0026#39;, default =\u0026gt; \u0026#39;Unknown\u0026#39; }; // Check if variable declare isset($color[\u0026#39;red\u0026#39;]); # true Loops \u0026amp; Iterations //for loop for ($i = 0; $i \u0026lt; 20; $i++) { echo \u0026#34;i value = \u0026#34; . i; } //while loop $number = 1; while ($number \u0026lt; 10) { echo \u0026#39;value : \u0026#39; . $number ; $number += 1; } //do while $number = 1; do { echo \u0026#39;value : \u0026#39; . $number ; $number += 1; } while ($number \u0026lt; 10); // foreach with break / continue exemple $values = [\u0026#39;one\u0026#39;, \u0026#39;two\u0026#39;, \u0026#39;three\u0026#39;]; foreach ($values as $value) { if ($value === \u0026#39;two\u0026#39;) { break; // exit loop } elseif ($value === \u0026#39;three\u0026#39;) { continue; // next loop iteration } } Functions //function declararion function name($firstName, $lastName = \u0026#39;defaultvalue\u0026#39;) { return \u0026#34;$firstName $lastName\u0026#34; } //function call name(\u0026#39;Mike\u0026#39;, \u0026#39;Taylor\u0026#39;); //function call with named parameters (PHP 8) name(firstName: \u0026#39;Mike\u0026#39;, lastName: \u0026#39;Taylor\u0026#39;); // order can change //function variables params function name(...$params) { return $params[0] . “ “ . params[1]; } // Closure function Route::get(\u0026#39;/\u0026#39;, function () { return view(\u0026#39;welcome\u0026#39;); }); // Arrow functions Route::get(\u0026#39;/\u0026#39;, fn () =\u0026gt; view(\u0026#39;welcome\u0026#39;); // Typed parameter and typed return function display(string $first, string $last) : string { return \u0026#34;$first $last\u0026#34;; } // Typed or null function display(?string $name) { ... } // Union type (or) function display(string|int $data) { ... } // Intersection type (and) function count_and_interate(Iterator\u0026amp;Countable $value) { ... } // Return any type (mixed) function logInfo(string $info) : mixed { ... } // No return (void) function logInfo(string $info) : void { ... } Enumerations // Declaration enum InvoiceStatus { case Sent; case Paid; case Cancelled; } // The enum can then be use as a type function printInvoiceStatus(InvoiceStatus $status) { print($status-\u0026gt;name); } printInvoiceStatus(InvoiceStatus::Sent); // Sent // enum with return value and public function exemple enum InvoiceStatus : int { case Sent = 0; case Paid = 1; case Cancelled = 2; public function text() : string { return match ($this) { self::Sent =\u0026gt; \u0026#39;Sent\u0026#39;, self::Paid =\u0026gt; \u0026#39;Paid\u0026#39;, self::Cancelled =\u0026gt; \u0026#39;Cancelled\u0026#39; }; } } function getInvoiceStatus(InvoiceStatus $status) { print($status-\u0026gt;text()); print($status-\u0026gt;value); } getInvoiceStatus(InvoiceStatus::Paid); // Paid1 Files // Get the current dir $current_dir = __DIR__; // Check if file exist if (file_exists(\u0026#39;/posts/first.txt\u0026#39;)) { do some stuff } // Read file content into one variable $post = file_get_contents($file); //File read $file = fopen(\u0026#34;test.txt\u0026#34;, \u0026#34;r\u0026#34;); //Output lines until EOF is reached while(! feof($file)) { $line = fgets($file); echo $line. \u0026#34;\u0026lt;br\u0026gt;\u0026#34;; } fclose($file); // File write (csv) $file = fopen(\u0026#39;export.csv\u0026#39;, \u0026#39;a\u0026#39;); $array = [\u0026#39;name\u0026#39; =\u0026gt; \u0026#39;Mike\u0026#39;, \u0026#39;age\u0026#39; =\u0026gt; 45]; //Write key name as csv header fputcsv($file, array_keys($array[0])); //Write lines (format as csv) foreach ($array as $row) { fputcsv($file, $row); } fclose($file); Errors //Throw Error if (someCondition) { throw new Exception(\u0026#39;Data format error\u0026#39;); } //Catch the Error try { $db-\u0026gt;checkData($data); } catch (Exception $e) { echo $e-\u0026gt;getMessage(); } OOP //class declaration class Person { } // object instantiation $person = new Person //class properties and constructor class Person { protected $firstName; protected $lastName; public function __construct($firstName, $lastName) { $this-\u0026gt;firstName = $firstName; $this-\u0026gt;lastName = $lastName } // Constructor Property Promotion (PHP 8) class Person { public function __construct(protected $firstName, protected $lastName) { } // Getter and Setter class Person { private $name; public function setName($name){ if(!is_string($name)){ throw new Exception(\u0026#39;$name must be a string!\u0026#39;); } $this-\u0026gt;name = $name; } public function getName(){ return $this-\u0026gt;name; } } // Readonly properties (PHP 8.1) class Person { public function __construct( public readonly string $firstName, public readonly string $lastName ) { } } //static constructor public static function create(...$params) { return new self($params) } $person = Person::create(‘Mike’, ‘Taylor’); // Static Method class greeting { public static function welcome() { echo \u0026#34;Hello World!\u0026#34;; } } // Call static method greeting::welcome(); // Static method call class greeting { public static function welcome() { echo \u0026#34;Hello World!\u0026#34;; } public function __construct() { static::welcome(); } } new greeting(); // Static constant class Connection { const MAX_USER = 100; } echo Connection::MAX_USER # 100 // class inheritance class Customer extends Person { public function name() { parent::name(); echo \u0026#39;Override method\u0026#39;; } } // self keyword reference current class (not modify by inheritance late binding like static will be) self::welcome(); // Interface interface Animal { public function makeSound(); } class Cat implements Animal { public function makeSound() { echo \u0026#34;Meow\u0026#34;; } } $animal = new Cat(); $animal-\u0026gt;makeSound(); //Trait (mix-in) trait HelloWorld { public function sayHello() { echo \u0026#39;Hello World!\u0026#39;; } } class Greetings { use HelloWorld; } $object = new Greetings(); $object-\u0026gt;sayHello(); Superglobals TODO\n$GLOBALS $_SERVER $_REQUEST $_GET $_POST $_SESSION $_COOKIE $_FILES $_ENV References 📔 PHP: Operators PHP Keywords PHP Functions \u0026amp; Methods ModernPHP Series\u0026rsquo; Articles PHP | Superglobals PHP Superglobals Explained—With Cheatsheet PHP cheat sheet (updated to PHP 8.1) ","permalink":"https://blog2.cmwang.net/zh/posts/2020/10/php-cheat-sheet/","summary":"Cheat Sheet for PHP8","title":"PHP Cheat Sheet"},{"content":"魔術方法 (Magic Methods) 魔術方法是在類別中具有特殊名稱的方法，它們在特定的時機被自動呼叫，這些時機通常與類別的操作和生命週期相關。一個常用的魔術方法是建構子（Constructor）。\n建構子 (Constructor) 建構子是一個特殊的方法，它在類別被實例化（物件被建立）時自動被呼叫。建構子通常用於初始化物件的屬性或進行一些初始設定。\nclass MyClass { public function __construct() { echo \u0026#34;物件已被建立！\u0026#34;; } } $object = new MyClass(); // 輸出：物件已被建立！ Custom Methods 自訂方法是我們根據類別的需求自行定義的方法。其中的一個常見技巧是使用 return $this，這使得方法可以被鏈式呼叫（Method Chaining）。\n鏈式呼叫(Method Chaining) 指在同一個物件上連續呼叫多個方法，而不需要每次呼叫都賦值給一個變數。\nclass Calculator { private $result = 0; public function add($value) { $this-\u0026gt;result += $value; return $this; // 返回物件本身以便鏈式呼叫 } public function subtract($value) { $this-\u0026gt;result -= $value; return $this; // 返回物件本身 } public function getResult() { return $this-\u0026gt;result; } } $calculator = new Calculator(); $result = $calculator-\u0026gt;add(10)-\u0026gt;subtract(5)-\u0026gt;getResult(); echo $result; // 輸出：5 在這個例子中，add 和 subtract 方法返回了物件本身 $this，這樣它們可以連續呼叫，而不需要每次呼叫都賦值給一個變數。\n建構子引數的推廣 (Constructor Property Promotion) 在 PHP 8.0 及以上版本中，引入的新特性。\n當使用建構子引數推廣之前，我們需要手動為每個類別的屬性指定建構子引數，然後在建構子中賦值。以下是一個使用前的範例：\nclass User { private string $name; private string $email; private ?string $phoneNumber; public function __construct(string $name, string $email, ?string $phoneNumber) { $this-\u0026gt;name = $name; $this-\u0026gt;email = $email; $this-\u0026gt;phoneNumber = $phoneNumber; } } // 建立使用者物件 $user = new User(\u0026#39;John Doe\u0026#39;, \u0026#39;john@example.com\u0026#39;, \u0026#39;123-456-7890\u0026#39;); 在上面的範例中，我們需要手動宣告建構子的引數，然後再將這些引數賦值給類別的屬性。\n使用建構子引數推廣後的範例：\nclass User { public function __construct( private string $name, private string $email, private ?string $phoneNumber = null ) { // 建構子的內容 } } // 建立使用者物件 $user = new User(\u0026#39;John Doe\u0026#39;, \u0026#39;john@example.com\u0026#39;, \u0026#39;123-456-7890\u0026#39;); 在這個例子中，建構子的引數列表直接宣告瞭類別的屬性。$name 和 $email 屬性是必須的，而 $phoneNumber 屬性是可選的（使用 ?string 表示可以為空）。在建構子中，不需要再手動賦值給這些屬性，PHP 會自動處理。這樣，我們可以簡化建構子的定義，使程式碼更加簡潔和易讀。\n存取修飾符 (Access Modifiers) public（公共) public 修飾符表示該成員(屬性或方法)在類別內外部均可被訪問。這意味著無論是在類別內部、子類別、還是外部程式碼中，都可以直接訪問這個成員，它是預設值。\nclass MyClass { public $publicProperty; public function publicMethod() { // 可以被任何地方訪問 } } protected (受保護) protected 修飾符表示該成員只能在定義它的類別內部和子類別中被訪問。外部程式碼無法直接訪問受保護的成員。\nclass MyClass { protected $protectedProperty; protected function protectedMethod() { // 只能在類別內部和子類別中訪問 } } private（私有) private 修飾符表示該成員指能在定義它的類別內部被訪問，對於外部程式碼和子類別都是不可見的。\nclass MyClass { private $privateProperty; private function privateMethod() { // 只能在類別內部訪問 } } Null-Safe Operator 在 PHP 8.0 版本中，引入了 Null-Safe Operator（空安全運算子），也稱為 Null-Safe Operator（?-\u0026gt;），它是一種簡化程式碼的語法糖，用於在操作可能為 null 的物件時避免產生錯誤。\n在舊版本的 PHP 中，如果你試圖在一個可能為 null 的變數上呼叫方法或訪問屬性，你必須先檢查該變數是否為 null，以避免產生 Fatal Error。例如：\nif (isset($object)) { $value = $object-\u0026gt;getValue(); } else { $value = null; } 使用 Null-Safe Operator，你可以將上面的程式碼簡化為：\n$value = $object?-\u0026gt;getValue(); 這樣，如果$object為 null，表示式的結果將會是 null，而不會丟擲錯誤。Null-Safe Operator 只能用於物件的方法呼叫和屬性訪問，不能用於陣列和函式呼叫。這個語法糖使得處理可能為 null 的物件更加方便和簡潔。\n這裡是一個使用 Null-Safe Operator 的例子：\nclass MyClass { public function getValue(): ?string { // 返回一個可能為null的值 return \u0026#34;Hello, World!\u0026#34;; } } $object = null; // 或者一個MyClass的實例 // 使用Null-Safe Operator呼叫可能為null的物件方法 $value = $object?-\u0026gt;getValue(); echo $value; // 輸出 \u0026#34;Hello, World!\u0026#34; 或者 null（如果$object為null的話） 在這個例子中，無論$object是一個 MyClass 的實例還是 null，都不會產生錯誤，因為 Null-Safe Operator 會自動處理 null 情況。\nNamespace 在 PHP 中，名稱空間（Namespace）是一種用來解決在不同類別之間命名衝突的機制。名稱空間可以是可選的，但在大型應用程式中，良好的組織和結構是非常重要的。以下是有關 PHP 名稱空間的一些基本概念和最佳實踐：\n在程式檔案的最前面，你可以使用namespace宣告定義一個名稱空間。例如：\ndeclare(strict_types=1); namespace APP; // after strict_types class MyClass { // class implementation } 如果你的應用程式需要更深的組織結構，你可以使用巢狀名稱空間（Nested Namespace）。例如，如果你有一個銀行相關的類別，你可以這樣定義：\nnamespace APP\\Bank; class BankAccount { // class implementation } 當你在不同的名稱空間中使用類別時，你可以使用use關鍵字。例如，如果你要使用APP名稱空間中的Account類別，你可以這樣做：\n# method1 $myAccount = new App\\Account(); # method2 use APP\\Account; $myAccount = new Account(); 在某些情況下(當前在 namespace APP 下)，你可能需要使用 global namespace 中的類別。你可以使用斜線（\\）字首來表示全域性名稱空間。例如：\nnamespace App; # method1 new \\DateTime(); # method2 use DateTime; new DateTime(); 有時候，你可能會想要為一個長命名的類別使用別名（Alias）。這樣可以使你的程式碼更簡潔易讀。例如：\nuse DateTime as DT; new DT(); 如果你需要引入多個名稱空間中的類別，你可以使用逗號（,）分隔它們。例如：\nuse APP\\Account; use APP\\SocialMedia; // 改寫 use APP\\{Account, SocialMedia}; 使用名稱空間和use語句，讓你可以更好地組織你的程式碼，避免命名衝突，使程式碼更易於維護和擴充套件。\nAutoloading Classes 使用自動載入機制（例如 spl_autoload_register 函式）主要是為了方便管理多個類別，特別是當每個類別都儲存在獨立的檔案中時。這樣，你可以根據類別的名稱空間和類別名稱來自動載入相應的檔案。\n然而，如果在同一個檔案中既有類別定義又有函式定義，那麼最好還是在需要的時候手動引入這些檔案。這是因為自動載入機制主要是為了類別而設計的，而不是用來處理函式。如果在自動載入的過程中引入了一個檔案，裡面除了類別定義還包含其他程式碼（如函式定義），可能會導致不必要的程式碼複雜性和不易讀懂的程式碼。\n因此，最佳的做法是：\n將每個類別儲存在獨立的檔案中。 這樣可以使用自動載入機制，方便地根據類別的名稱空間和類別名稱來自動載入相應的檔案。\n如果檔案中既有類別定義又有函式定義，需要時手動引入。 如果檔案中有其他不屬於類別的程式碼（例如函式或常數），最好在需要使用這些程式碼的地方手動引入相應的檔案。這樣可以確保程式碼的可讀性和可維護性。\n以下是一個範例，演示瞭如何使用自動載入機制來載入類別，並在需要的時候手動引入檔案中的函式：\n// require_once \u0026#39;APP/Account.php\u0026#39;; // require_once \u0026#39;APP/SocialMedia.php\u0026#39;; // require_once \u0026#39;APP/..\u0026#39;; spl_autoload_register(function($class){ $formattedClass = str_replace(\u0026#34;\\\\\u0026#34;, \u0026#34;/\u0026#34;, $class); $path = \u0026#34;{$formattedClass}.php\u0026#34;; require_once $path; }); // 使用自動載入機制載入類別 $account = new \\APP\\Account(); // 手動引入檔案中的函式 require_once \u0026#39;path/to/file-with-functions.php\u0026#39;; // 現在你可以使用檔案中定義的函式 myFunction(); 常數 (Constants) 在 PHP 中，常數是在類別中定義的不可改變的值，這些值在整個類別中都是固定的。在類別中定義常數使用 const 關鍵字，不可使用 define() 函式。\nclass Account { const INTEREST_RATE = 0.05; // 其他類別成員和方法 } // 存取常數的方式 echo Account::INTEREST_RATE; 在這個範例中，INTEREST_RATE 是 Account 類別的常數，它的值不可更改，可以在整個應用程式中使用，提高了程式碼的可讀性和一致性。\n靜態成員 (Static Members) 靜態屬性 (Static Properties) 靜態屬性是指在整個類別中共用的屬性，可以被所有實例共享。然而，靜態屬性的值可以被修改，因此在使用時需要小心 (能不要用就不要用)。\nclass Account { public static $count = 0; public function __construct() { self::$count++; } public static function getCount() { return self::$count; } } // 使用靜態屬性 $account1 = new Account(); $account2 = new Account(); echo Account::$count; // 輸出：2 在這個例子中，$count 是一個靜態屬性，用來記錄 Account 類別的實例數量。每次建立一個新的 Account 物件時，$count 的值會自動增加。\n靜態方法 (Static Methods) 靜態方法是可以在不建立類別實例的情況下直接呼叫的方法。靜態方法通常用於 utility 類別，這些方法不依賴於特定的實例，而是執行通用的任務。這搭配上前面提到的 Autoloading Class 方法時會相當方便。\nclass Utility { public static function calculateArea($radius) { return pi() * $radius * $radius; } } // 呼叫靜態方法 $area = Utility::calculateArea(5); // 計算半徑為5的圓面積 在這個例子中，calculateArea 是一個靜態方法，可以直接透過 Utility::calculateArea() 的方式呼叫，而不需要建立 Utility 物件。\n","permalink":"https://blog2.cmwang.net/zh/posts/2020/10/php-oop-part1/","summary":"PHP 物件導向上半部","title":"PHP 物件導向 (上)"},{"content":"Constrol Structures if else if 或 elseif 都可以。\n$score = 95; if ($score \u0026gt; 90) { var_dump(\u0026#34;A\u0026#34;); } else if ($score \u0026gt; 80) { var_dump(\u0026#34;B\u0026#34;); } elseif ($score \u0026gt; 80) { var_dump(\u0026#34;C\u0026#34;); } else { var_dump(\u0026#34;F\u0026#34;); } switch case 為字串也可以，每個條件要加 break 跳出。\n$paymentStatus = \u0026#34;1\u0026#34;; // both 1 or \u0026#34;1\u0026#34; works switch ($paymentStatus) { case 1: var_dump(\u0026#34;Success\u0026#34;); break; case 2: var_dump(\u0026#34;Denied\u0026#34;); break; default: var_dump(\u0026#34;Unknown\u0026#34;); } match match 是一種 expression，總是會回傳值。 與 switch 比起來， match 需要型態一致，不會主動 typecasting。 $paymentStatus = 2; $message = match ($paymentStatus) { 1 =\u0026gt; \u0026#34;Success\u0026#34;, 2 =\u0026gt; \u0026#34;Denied\u0026#34;, default =\u0026gt; \u0026#34;Unknown\u0026#34; }; while $a = 1; while ($a \u0026lt;= 15) { echo $a; } do { echo $a; $a++; } while ($a \u0026lt;= 15); for loop 跟 C 類似\nfor ($i = 1; $i \u0026lt;= 15; $i++) { echo $i; } 跳過特定條件 continue，跳出 break\nfor ($i = 1; $i \u0026lt;= 15; $i++) { if ($i == 6) { continue; } echo $i; } Foreach Loop $names = [\u0026#34;John\u0026#34;, \u0026#34;Jane\u0026#34;, \u0026#34;Sam\u0026#34;]; foreach ($names as $name) { var_dump($name); } 獲取 key 的方式\n$names = [\u0026#34;John\u0026#34;, \u0026#34;Jane\u0026#34;, \u0026#34;Sam\u0026#34;]; foreach ($names as $key =\u0026gt; $name) { echo \u0026#34;key: {$key} =\u0026gt; \u0026#34; . \u0026#34;{$name}\u0026#34;; echo \u0026#34;\u0026lt;br\u0026gt;\u0026#34;; } Function // 回傳 string function getStatus($paymentStatus, $showMessage = true): string // 不回傳 function getStatus($paymentStatus, $showMessage = true): void // 可以透過 union，回傳可以是字串或者null function getStatus(int|float $paymentStatus, bool $showMessage = true): ?string // 接受各種 data type function getStatus(mixed $paymentStatus, bool $showMessage = true): ?string Misc Strict Types 放在最前面，每個檔案都要各別放。\ndeclare(strict_types=1); Constants define(\u0026#39;FOO\u0026#39;, \u0026#39;hello world\u0026#39;); // can not use in the class const FOO = \u0026#34;hello world\u0026#34;; // they cannot be conditionally defined within the flow of program execution. They must have an initial value at the time of declaration. Unset $name = \u0026#34;john\u0026#34;; echo $name; unset($name); // delete variable echo $name; $names = [\u0026#34;john\u0026#34;, \u0026#34;jane\u0026#34;, \u0026#34;bobo\u0026#34;]; echo $names; unset($names[1]); // delete variable $names = array_values($names); // reindex array to fill the gap 🔥 echo $names; Alternative if statement 另一種 if else 寫法，夾雜 HTML 時好用。\n\u0026lt;?php $permission=2; ?\u0026gt; \u0026lt;?php if ($permission === 1) : ?\u0026gt; \u0026lt;h1\u0026gt;Hello Admin\u0026lt;/h1\u0026gt; \u0026lt;?php elseif ($permission === 2) : ?\u0026gt; \u0026lt;h1\u0026gt;Hello OP\u0026lt;/h1\u0026gt; \u0026lt;?php else : ?\u0026gt; \u0026lt;h1\u0026gt;Hello Others\u0026lt;/h1\u0026gt; \u0026lt;?php endif; ?\u0026gt; Include files \u0026lt;?php include_once \u0026#39;nav.php\u0026#39;; ?\u0026gt; require 與 include 處理 error 不同 require 會傳出 fatal include 只會傳出 warning Variadic Function function sum(int|float ...$nums) { // syntax var_dump($nums); return array_sum($nums); } echo sum(5,2,9,1); Named Arguments function sum($a, $b) { var_dump($a, $b); return $a+$b; }; echo sum(b: 5, a: 2); 使用情境，只設定部分，如下例子：\n// setcookie( // string $name, // string $value = \u0026#34;\u0026#34;, // string $expires_or_options = 0, // string $path = \u0026#34;\u0026#34;, // string $domain = \u0026#34;\u0026#34;, // bool $secure = false, // bool $httponly = false // ): bool setcookie(\u0026#34;hello\u0026#34;, httponly: true); // named arguments Arrow Functions $mul = function($num) { return $num *2; }; echo $mul(5); // dollar sign Arrow Functions example\n$mul = fn ($num) =\u0026gt; $num * $multiplier; // similar to javascript Callable TODO\nPass by Reference $cup = \u0026#39;empty\u0026#39;; function fillCup(\u0026amp;$cupParam) { // add \u0026amp; before param! 🔥 $cupParam = \u0026#39;filled\u0026#39;; } fillCup($cup); echo $cup; Files $directory = scandir(__DIR__); mkdir(\u0026#39;foo\u0026#39;); rmdir(\u0026#39;foo\u0026#39;); if (file_exists(\u0026#39;example.txt\u0026#39;)) { // exists echo \u0026#39;File found!\u0026#39;; } if (file_exists(\u0026#39;example.txt\u0026#39;)) { echo filesize(\u0026#39;example.txt\u0026#39;); // size. cached file_put_contents(\u0026#39;example.txt\u0026#39;, \u0026#39;hello world!\u0026#39;); } clearstatcache(); // clear cache to update filesize file_get_contents(\u0026#39;example.txt\u0026#39;); Destructuring Arrays [$var1, $var2] = $array; 這樣就把 $array 數組的第一個元素賦值給了 $var1，第二個元素賦值給了 $var2。 🔥\n解構的主要用途之一是在函數返回多個值的時候。比如，如果你的函數需要返回多個數據，你可以將這些數據放在一個 Array 中，然後通過解構將數據分配給不同的變數。這樣可以提高代碼的可讀性和可維護性。\n另外，解構還可以用於遍歷 Array 或對象的元素，以及將函數的多個返回值解構為變數。\n// 解構數組 $array = [1, 2]; [$var1, $var2] = $array; echo $var1; // 輸出 1 echo $var2; // 輸出 2 // 函數返回多個值 function getValues() { return [1, 2]; } [$var1, $var2] = getValues(); echo $var1; // 輸出 1 echo $var2; // 輸出 2 // 遍歷數組元素 $array = [[1, 2], [3, 4]]; foreach ($array as [$a, $b]) { echo $a; // 輸出 1，然後 3 echo $b; // 輸出 2，然後 4 } Arrays Common Methods $users = [\u0026#39;john\u0026#39;, \u0026#39;jane\u0026#39;, \u0026#39;bob\u0026#39;, null]; // 1. isset null 或者 false 會失敗 if (isset($users[0])) { echo \u0026#34;User Found!\u0026#34;; } // 2. array_key_exists 只要有值，不管 null 或者 false 都會成立 if (array_key_exists(3, $users)) { echo \u0026#34;User Found!\u0026#34;; } // 3. array_filter 剔除 null 或者 false $users = array_filter($users); echo \u0026#39;\u0026lt;pre\u0026gt;\u0026#39;; print_r($users); echo \u0026#39;\u0026lt;/pre\u0026gt;\u0026#39;; // 4. array_filter callback $users = array_filter( $users, fn($users) =\u0026gt; $users != \u0026#39;bob\u0026#39; ); echo \u0026#39;\u0026lt;pre\u0026gt;\u0026#39;; print_r($users); echo \u0026#39;\u0026lt;/pre\u0026gt;\u0026#39;; // 5. array_map $users = array_map( fn($user) =\u0026gt; strtoupper($user), $users, ); // 6. merge $users = [\u0026#39;john\u0026#39;, \u0026#39;jane\u0026#39;, \u0026#39;bob\u0026#39;]; $users = array_merge( $users, [\u0026#39;Sam\u0026#39;, \u0026#39;Jessica\u0026#39;], ); // 7. sort sort($users); ","permalink":"https://blog2.cmwang.net/zh/posts/2020/10/php-fundamental/","summary":"PHP 語法基礎","title":"PHP 語法基礎"},{"content":"Expanding Our Horizons Overview Object Encapsulation Inheritance Handling variation Commonality and variability analysis Abstract class and its derived classes Objects: Traditional view and new view Traditional View Data with methods - smart data too narrow from implementation perspective Broad View From conceptual perspective an object is an entity that has responsibilities (責任), these responsibilities define the behavior of the object. Or an entity that has specific behavior (特定行為). Focus on intention/motivation not implementation This view enables us to build software in two steps:\nMake a preliminary design without worrying about all the details involved. Implement the design. The reason this works is that we only have to focus on the object’s public interface — the communication window through which I ask the object to do something.\nHiding implementations behind interfaces essentially decouples them from the using objects.\nEncapsulation: Traditional view and new view Traditional View data hiding Broad View any kind of hiding Implementations (data, methods..) Drived classes (Encapsulation of type is achieved when there is an abstract class with derivations (or an interface with implementations) that are used polymorphically) Design details Instantiation rules (ex. creational patterns) Advantage It gives us a better way to split up (decompose) our programs. The encapsulating layers become the interfaces we design to. (封裝層成為設計需要遵循的介面)\nBy encapsulating different kinds of subclasses (encapsulation of type), we can add new ones without changing any of the client programs using them. (GoF typically means when they mention encapsulation)\nInheritance Traditional View reuse of classes achived by creating classes and then deriving new (spcialized) classes bases on these base (generalized) classes Broad View using inheritance for specialization, however can cause weak cohesion reduces possibility of reuse does not scale well with variation to classify classes as things that behave the same way. (placeholder) Find What Is Varying and Encapsulate It Consider what should be variable in your design. This approach is the opposite of focusing on the cause of redesign. Instead of considering what might force a change to a design, consider what you want to be able to change without redesign. The focus here is on encapsulating the concept that varies, a theme of many design patterns. \u0026ndash; GoF, Design Patterns\nMore about GoF\u0026rsquo;s Encapsulation Design Patterns use inheritance to classify variations in behaviors. Hiding classes with an abstract class or interface — type encapsulation. Containing a reference of this abstract class or interface type (aggregation) hides these derived classes that represent variations in behavior. In effect, many design patterns use encapsulation to create layers between objects. Containing variation in data vs containing variation in behavior Handling variation in data Have a data member that tells me what type of movement my object has. Have two different types of Animals (both derived from the base Animal class) — one for walking and one for flying. Handling variation in behavior with objects Using objects to contain variation in attributes and using objects to contain variation in behavior are very similar. Don\u0026rsquo;t afraid.\nCommonality and Variability Identify where things vary (commonality analysis) and then identify how they vary (variability analysis).\nCommonality analysis is the search for common elements that helps us understand how family members are the same.\nVariability analysis reveals how family members vary. Variability only makes sense within a given commonality.\nEx. Whiteboard marker, pencil, ballpoint pen\nCommonality: writing instrument Variability: material to write, shape.. Commonality and Variability and Abstract class Commonality analysis seeks structure that is unlikely to change over time, while variability analysis captures structure that is likely to change. Variability analysis makes sense only in terms of the context defined by the associated commonality analysis. In other words, if variations are the specific concrete cases in the domain, commonality defines the concepts in the domain that tie them together. The common concepts will be represented by abstract classes. The variations found by variability analysis will be implemented by the concrete classes.\nRelationship between Commonality and Variability, perspectives, and abstract classes Benefits of using abstract classes for specialization Two-Step Procedure for Design Ask yourself:\nWhen defining an abstract class (commonality): What interface is needed to handle all the responsibilities (core concepts from the conceptual perspective) of this class? When defining derived classes: Given this particular implementation (this variation), how can I implement it (variation) with the given specification? Take away Think object-oriented in a broad way.\nObject: an entity that has responsibilities (specific behavior) Encapsulation: any kind of hiding (instantiation rule, type..) Inheritance: use for specialization and classify classes as things that behave the same way. Find what is varying and encapsulate it (in behavior).\nCommonality, variability and abstract class: use inheritance to classify variations in behaviors.\n","permalink":"https://blog2.cmwang.net/zh/posts/2017/01/design-patterns-explained-ch8/","summary":"\u003ch1 id=\"expanding-our-horizons\"\u003eExpanding Our Horizons\u003c/h1\u003e\n\u003ch2 id=\"overview\"\u003eOverview\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eObject\u003c/li\u003e\n\u003cli\u003eEncapsulation\u003c/li\u003e\n\u003cli\u003eInheritance\u003c/li\u003e\n\u003cli\u003eHandling variation\u003c/li\u003e\n\u003cli\u003eCommonality and variability analysis\u003c/li\u003e\n\u003cli\u003eAbstract class and its derived classes\u003c/li\u003e\n\u003c/ul\u003e","title":"Design Patterns Explained - CH8"},{"content":"Object-Oriented Paradigm Purpose: Explain why object-oriented paradigm over functional decomposition.\nNaive Problem If I were to give you the task of writing code to access a description of shapes that were stored in a database and then display them.\n如果給你一個任務，要編寫一段程式，存取在資料庫中儲存的形狀描述，然後將它顯示出來。\nStructural Programming thinking - possible steps Locate the list of shapes in the database. (在資料庫中找到形狀清單)。 Open up the list of shapes. (打開形狀清單)。 Sort the list according to some rules. (依照某種規則將清單排序)。 Display the individual shapes on the monitor. (在螢幕上顯示各種形狀)。 Functional Decomposition (功能分解) 4a. Identify the type of shape. (識別形狀的類型)。 4b. Get the location of the shape. (獲取形狀的位置)。\n4c. Call the appropriate function that will display the shape, giving it the shape’s location. (以形狀的位置為參數，呼叫顯示形狀的 Function)。\nFunctional Decomposition 的挑戰 它通常會導致一個**主**程式負責控制子程式(subprograms)。 這使得主程式所承受的責任太多了：要協調各 subprograms，還要控制他們的順序 (Why not delegation?)。 \u0026laquo;上帝物件：能者多勞\u0026raquo; 如果將實作各步驟的所有邏輯都放在一個大 Function 或大 module 的話，則這些步驟的實質性變化，都必須對這個 Function 或 module 進行修改。 \u0026laquo;因應變化的能力差\u0026raquo; 討論 需求總是在改變 (不變的真理)。 我們可能不知道會發生什麼變化，但我們能夠猜到哪裡會變化。(OO 最大的優點之一，就是可以封裝這些變化區域)。 與其抱怨需要總是改變，不如改變開發流程，有效的因應變化。 Dealing with Changes: Functional Decomposition 4c. Call the appropriate function that will display the shape, giving it the shape’s location. (以形狀的位置為參數，呼叫顯示形狀的 Function)。\nUsing Modularity to Contain Variation\nfunction: display shape input: type of shape, description of shape action: switch (type of shape) case square: put display function for square here case circle: put display function for circle here 討論 如果要顯示一個新的形狀(例如三角形)，我可能只需要改這個模組(希望是)。 這個模組的輸入是 type of shape, description of shape，如果今天使用不同方式提供輸入(例如 array of points 或其他方式)，該怎麼辦？ Functional Decomposition 兩個可能的問題 Weak cohesion (Cohesion refers to how “closely the operations in a routine are related; cohesion as clarity because the more that operations are related in a routine (or a class), the easier it is to understand things.) Tight Coupling (Coupling refers to “the strength of a connection between two routines. Coupling is a complement to cohesion.) The goal is to create routines with internal integrity (strong cohesion) and small, direct, visible, and flexible relations to other routines (loose coupling).\n從日常生活借鏡 You are an instructor at a conference. People in your class have another class to attend following yours, but don’t know where it is located. One of your responsibilities is to make sure everyone knows how to get to the next class.\n你的責任是確保大家知道怎麼去到下一堂課的位置。\n可能的步驟 Get list of people in the class. For each person on this list, do the following: Find the next class he or she is taking. Find the location of that class. Find the way to get from your classroom to the person’s next class. Tell the person how to get to his or her next class. 所以你可能需要這麼做 A way of getting the list of people in the class. A way of getting the schedule for each person in the class. A program that gives someone directions from your classrom to any other classroom. A control program that works for each person in the class and does the reuqired steps for each person. 不! 你應該會這樣做 你可能會把從這個教室到其他教室的路線貼出來，然後告訴所有人：我們已經將下一堂課的地點和其他教室的位置都貼在後面了，請根據它找到你們下一堂課的教室。\nYou would probably post directions to go from this classroom to the other classrooms and then tell everyone in the class, I have posted the locations of the classes following this in the back of the room, as well as the locations of the other classrooms. Please use them to go to your next classroom.\n兩種策略的差別 Giving explicit directions to everyone. Giving general instructions and then expect the each person will figure out how to do the task individually. (責任轉移 delegation) 需求又改變了 如果我被告知，需要給擔任助教工作的學生一些特殊指示。他們可能需要在下一堂課前收集本堂課學生的評價，並且交到辦公室。\n第一種方式，不得不改控制程式，區別研究生跟大學生，然後給研究生特別的指示。 第二種方式，只需要為研究生再編寫一個程式，但控制程式仍然只需要說: 找到你們的下一堂教室。 為什麼有這麼大的差異 人們對自己的行為負責，而不再由一個中央控制程式負責決定。 控制程式可以與不同類型的學生交流(大學生或研究生)。 控制程式不需要知道學生從這個教室到下一個教室可能需要採取的任何特殊步驟。 軟體開發的三種視角 Conceptual: 表示 domain concepts，不管如何實作。回答這個問題：What am I responsibile for? Specification: 關注軟體的 interface，但還是不管如何實作。回答這個問題：How am I used? Implementation: 我們都很熟。回答這個問題： How do I fulfill my responsibilities?\u0026quot; 不同視角的用途 概念層次上的溝通：你告訴學生的是「你要他們怎麼做」，而不是「如何去做」。 (you are telling people what you want, not how to do it.)\n在概念層次上交流，而在另一層次(實作)上執行，這樣講師就不需要知道具體的實作細節。只需要一般性，概念性的知道即可。\n效力：只要概念不變，請求者與實作細節的變化就被隔離開來。\nObject-Oriented Paradigm 使用物件的優點在於，可以定義物件負責自己的事務。\n討論 The objects were identified by looking at the entities in the problem domain. I identified the responsibilities (or methods) for each object by looking at what these entities need to do.\n\u0026ndash; ☆☆☆ 理解物件的最佳方式 ☆☆☆ 將其看為具有責任的東西。物件應該自己負責自己，而且應該清楚地定義責任。\nApply Fowler\u0026rsquo;s Perspectives At the conceptual level, an object is a set of responsibilities. (一組責任) At the specification level, an object is a set of methods (behaviors) that can be invoked by other objects or by itself. (一組行為) At the implementation level, an object is code and data and computational interactions between them. Object-Oriented Approach Start the control program. Instantiate the collection of students in the classroom. Tell the collection to have the students go to their next class. The collection tells each student to go to his or her next class. Each student: Finds where his next class is. Determines how to get there. Goes there. Done. Abstract and Polymorphism Student abstract class, GraduageStudent and RegularStudent classes. Abstract classes define what other, related, classes can do. Abstract classes act as placeholders for other classes. Collection 只需要處理 Student 這個 Concept (Abstract)，每一種 Student 都可以按照自己的方式實作功能 (Concrete)。 當我們透過抽象參考，概念性的要求物件做什麼時，將得到不同的行為，具體行為取決於 Derived Class 的實作。(Polymorphism) 回到一開始的問題 Locate the list of shapes in the database. (在資料庫中找到形狀清單)。 Open up the list of shapes. (打開形狀清單)。 Sort the list according to some rules. (依照某種規則將清單排序)。 Display the individual shapes on the monitor. (在螢幕上顯示各種形狀)。 Object-Oriented Approach (1/2) Object-Oriented Approach (2/2) 主程式建立一個 ShapeDataBase 物件。 主程式要求 database object 找到我感興趣的一組形狀，並且 instantiate 一個保存這些形狀的 collection 物件. 主程式要求 Collection 物件排序所存放的形狀。 主程式要求 Collection 物件顯示形狀。 Collection 物件要求所存放的每個形狀顯示自己。 每個形狀根據形狀種類顯示自己。 需求又改變了 增加新的形狀 (三角形)\n增加一個新的三角形 Concrete Class 在此 Derived Class 實作自己的顯示方法。 更改排序方式\n修改 Collection 的 Sorting algorithm 結果：The object-oriented approach has limited the impact of changing requirements.\n封裝的優點 使用更容易，因為使用者不再需要擔心實作問題 可以在不考慮呼叫者的情況下修改實作 (因為它一開始就不知道物件怎麼實作的 depend on interface, not implementation) The internals of an object are unknown to other objects. (封裝使物件內部行為的變化對其他物件變得透明了 \u0026lt;不可見\u0026gt;)。 Take away 將物件看為具有責任的東西。物件應該自己負責自己，而且應該清楚地定義責任。 物件真正的威力不在於繼承，而是來自於封裝行為(採取更廣義的封裝定義)。 OO 最大的優點之一，就是可以封裝這些變化區域。 抽象與責任轉嫁的好處 (placeholder and delegation)。 三種視角的應用 (在抽象層次上溝通，在實作層次上執行)。 ","permalink":"https://blog2.cmwang.net/zh/posts/2017/01/design-patterns-explained-ch1/","summary":"\u003ch1 id=\"object-oriented-paradigm\"\u003eObject-Oriented Paradigm\u003c/h1\u003e\n\u003cp\u003ePurpose: Explain why object-oriented paradigm over functional decomposition.\u003c/p\u003e","title":"Design Patterns Explained - CH1"},{"content":"以前收集的一些學習資源，年代有點久遠，請斟酌參考。\nResources [Design Pattern]資源總整理 UML 軟件工程組織 圖說設計模式 真 OO 无双 之 真乱舞书 Source Making Best Practice Software Engineering 白話 Rock 的系統開發雜記 .Net 蛤什麼? 非關語言: 設計模式 OO Design Object-Oriented Software Engineering Go 言語での構造體実裝パターン Cloud Design Patterns: Prescriptive Architecture Guidance for Cloud Applications ","permalink":"https://blog2.cmwang.net/zh/posts/2017/01/design-patterns-resources/","summary":"一些設計模式的連結，年代有點久了，不是很值得參考了","title":"設計模式學習資源"}]